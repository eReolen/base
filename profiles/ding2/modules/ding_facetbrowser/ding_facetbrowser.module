<?php

/**
 * @file
 * The ding_facetbrowser module.
 */

use Ting\Search\TingSearchFacet;
use Ting\Search\TingSearchResultInterface;
use Ting\Search\BooleanStatementInterface;

/**
 * Implements hook_block_info().
 */
function ding_facetbrowser_block_info() {
  return array(
    'facetbrowser' => array(
      'info'  => t('Facet browser'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ding_facetbrowser_menu() {
  $items = array();

  $items['admin/config/ting/facets'] = array(
    'title' => 'Ting facets',
    'description' => 'Configure facets.',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_facetbrowser_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ding_facetbrowser.admin.inc',
  );

  $items['admin/config/ting/facets/%/delete'] = array(
    'title' => 'Delete facets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_facetbrowser_delete_facet', 4),
    'access arguments' => array('administer ting settings'),
    'file' => 'ding_facetbrowser.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ding_facetbrowser_theme() {
  return array(
    'facetbrowser' => array(
      'variables' => array(
        'search_result' => NULL,
      ),
    ),
    'ding_facetbrowser_settings' => array(
      'render element' => 'form',
      'file' => 'ding_facetbrowser.admin.inc',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ding_facetbrowser_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ding_facetbrowser_ctools_plugin_api($module, $api) {
  if ($module == 'panels_mini' && $api == 'panels_default') {
    return array('version' => 1);
  }
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Get the interval element.
 *
 * @param \Ting\Search\TingSearchFacet $facet
 *   The facet.
 * @param \Ting\Search\TingSearchResultInterface $search_result
 *   Search result.
 *
 * @return array
 *   An interval form element container.
 */
function _ding_facetbrowser_form_interval_element(TingSearchFacet $facet, TingSearchResultInterface $search_result) {
  // To get the correct counter for the span, we need to run the
  // search without the actual interval filter on, so the complete dataset
  // is included.
  $run_search = FALSE;
  $range = array();

  // Check if the facet is used, and remove it from the count_request.
  $count_request = clone $search_result->getSearchRequest();
  $filters = $count_request->getFilters();
  foreach ($filters as $filter_delta => $filter) {
    $statements = $filter->getStatements();
    foreach ($statements as $statement_delta => $statement) {
      // Remove all facet conditions.
      if ($statement->getName() === $facet->getName()) {
        switch ($statement->getOperator()) {
          case $statement::OP_GT_EQUAL:
            $range[0] = (int) $statement->getValue();
            break;

          case $statement::OP_LT_EQUAL:
            $range[1] = (int) $statement->getValue();
            break;
        }

        $run_search = TRUE;
        unset($statements[$statement_delta]);
      }
    }

    if (empty($statements)) {
      unset($filters[$filter_delta]);
    }
    else {
      $filter->add($statements);
    }
  }

  $count_request = $count_request->withFilters($filters, BooleanStatementInterface::OP_AND, FALSE);

  // Only run the counter, if it's different from the search already
  // performed.
  if ($run_search === TRUE) {
    $cache_key = 'ding_facetbrowser:interval:' . md5(serialize($count_request));
    $cache = cache_get($cache_key);

    if (!$cache) {
      $count_search_result = $count_request
        ->withCount(0)
        ->withFacets([$facet->getName()])
        ->withTermsPrFacet(999)
        ->execute();

      cache_set($cache_key, $count_search_result, 'cache', CACHE_TEMPORARY);
    }
    else {
      $count_search_result = $cache->data;
    }
  }
  else {
    $count_search_result = ting_search_current_results();
  }

  // Set min and max values.
  $terms = $count_search_result->getFacets()[$facet->getName()]->getTerms();
  foreach ($terms as $value => $term) {
    if (!is_numeric($value)) {
      unset($terms[$value]);
    }
  }
  ding_facetbrowser_sort_terms($terms, 'numeric');
  $interval = array_keys($terms);

  // Set the range (default value).
  if (empty($range)) {
    $range = array(0, count($interval) - 1);
  }
  else {
    $range = array(
      array_search($range[0], $interval) ?: 0,
      array_search($range[1], $interval) ?: count($interval) - 1,
    );
  }

  // Create the interval container, with slider and range indicator.
  return array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('ding-facetbrowser-interval', 'js-ding-facetbrowser-interval'),
      'data-facet-name' => $facet->getName(),
    ),
    'slider' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('ding-facetbrowser-interval__slider')),
    ),
    'start' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('ding-facetbrowser-interval__start')),
    ),
    'end' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('ding-facetbrowser-interval__end')),
    ),
    '#attached' => array(
      'library' => array(
        array('system', 'ui.slider'),
      ),
      'js' => array(
        array(
          'data' => array(
            'ding_facetbrowser' => array(
              'intervals' => array(
                $facet->getName() => array(
                  'interval' => $interval,
                  'range' => $range,
                  'uri' => $GLOBALS['base_root'] . _ding_facetbrowser_parse_request_uri(),
                ),
              ),
            ),
          ),
          'type' => 'setting',
        ),
      ),
    ),
  );
}

/**
 * Create a custom form with checkbox elements for facets and ajax callback.
 *
 * @param \Ting\Search\TingSearchResultInterface $search_result
 *   Search result.
 */
function ding_facetbrowser_form($form, &$form_state, TingSearchResultInterface $search_result) {
  global $base_root;

  $facets = $search_result->getFacets();

  $default_values = array();
  $selected = array();
  $not_selected = array();

  $form['search_key'] = array(
    '#type'  => 'hidden',
    '#value' => $search_result->getSearchRequest()->getFullTextQuery(),
  );

  // Building the facets field sets.
  $i = 0;
  $facet_show_count = variable_get('ding_facetbrowser_showcount', count($facets));
  foreach (variable_get('ding_facetbrowser_facets', array()) as $configured_facet) {

    if (!empty($facets[$configured_facet['name']])) {
      /** @var Ting\Search\TingSearchFacet $facet */
      $facet = $facets[$configured_facet['name']];

      // Decide if the facet is to have the hidden class or not.
      $facet_class = ($i >= $facet_show_count) ? 'js-hidden' : 'js-visible';

      if (count($facet->getTerms()) > 0) {
        $form[$facet->getName()] = array(
          '#type' => 'fieldset',
          '#title' => check_plain($configured_facet['title']),
          '#attributes'  => array(
            'id' => str_replace('.', '-', $facet->getName()),
            'data' => array(
              $facet->getName(),
            ),
            'count' => count($facet->getTerms()),
            'class' => array(
              $facet_class,
            ),
          ),
        );

        switch ($facet->getType()) {
          case $facet::TYPE_INTERVAL:
            $form[$facet->getName()]['interval'] = _ding_facetbrowser_form_interval_element($facet, $search_result);

            // Continue the loop, so we don't include the regular checkboxes.
            continue 2;
        }

        // Sort the list of terms.
        $terms = $facet->getTerms();
        if (!empty($configured_facet['sorting'])) {
          ding_facetbrowser_sort_terms($terms, $configured_facet['sorting']);
        }

        foreach ($terms as $term_name => $term) {
          $facets_string = $facet->getName() . ':' . $term_name;
          $term_name_title = $term_name;
          ding_facetbrowser_format_term_name($term_name, $term->getCount());

          if (_ding_facetbrowser_is_facet_set($facet->getName(), $term_name) === TRUE) {
            $default_values[] = $term_name;
            $facets_string = '-' . $facets_string;

            $uri = $base_root . _ding_facetbrowser_parse_request_uri();
            $selected[$term_name] = l($term_name_title . ' <span class="count">(' . $term->getCount() . ')</span>', $uri, array(
              'html' => TRUE,
              'query' => array(
                'facets' => array('' => $facets_string),
              ),
              'attributes' => array(
                'title' => $term_name,
              ),
            ));
          }
          else {
            $uri = $base_root . _ding_facetbrowser_parse_request_uri();
            $not_selected[$term_name] = l($term_name_title . ' <span class="count">(' . $term->getCount() . ')</span>', $uri, array(
              'html' => TRUE,
              'query' => array(
                'facets' => array('' => $facets_string),
              ),
              'attributes' => array(
                'title' => $term_name,
              ),
            ));
          }

          $form[$facet->getName()][$facet->getName()] = array(
            '#type' => 'checkboxes',
            '#options' => $selected + $not_selected,
            '#default_value' => $default_values,
          );
        }
      }
      // Loop is done so time to up that counter.
      $i++;
    }

    // Reset previous set variables.
    $default_values = array();
    $selected = array();
    $not_selected = array();
  }

  return $form;
}

/**
 * Sorts facet terms with the specified sorting.
 */
function ding_facetbrowser_sort_terms(&$terms, $sorting) {
  switch ($sorting) {
    case 'alphabetical':
      ksort($terms);
      break;

    case 'alphabetical_reverse':
      krsort($terms);
      break;

    case 'numeric':
      ksort($terms, SORT_NUMERIC);
      break;

    case 'numeric_reverse':
      krsort($terms, SORT_NUMERIC);
      break;

    default:
      break;
  }
}

/**
 * The sort options we support for facet terms.
 */
function ding_facetbrowser_sort_terms_options() {
  return array(
    'default' => t('Ranking (default)'),
    'alphabetical' => t('Alphabetic'),
    'aphabetical_reverse' => t('Alphabetic (reverse)'),
    'numeric' => t('Numeric'),
    'numeric_reverse' => t('Numeric (reverse)'),
  );
}

/**
 * Helper function to format term name title.
 *
 * @See: ding_facetbrowser_form()
 */
function ding_facetbrowser_format_term_name($term_name, $term_count) {
  $substr_length = 19 +
    substr_count(drupal_substr($term_name, 0, 20), 'l') +
    substr_count(drupal_substr($term_name, 0, 20), 'i') -
    drupal_strlen((string) $term_count);
  if (drupal_strlen($term_name) > $substr_length) {
    return drupal_substr($term_name, 0, $substr_length) . '...';
  }
  return $term_name;
}

/**
 * Check if selected facet from url matches the one from params.
 *
 * @param string $term_cat
 *   Term category.
 * @param string $term_name
 *   Term name.
 *
 * @return bool
 *   If the facet is set.
 */
function _ding_facetbrowser_is_facet_set($term_cat, $term_name) {
  $facets = &drupal_static('ding_facetbrowser_facets');
  if (!isset($facets)) {
    $request_uri_parts = explode('?', request_uri());
    $facets = explode('&', rawurldecode(end($request_uri_parts)));
    drupal_static('ding_facetbrowser_facets', $facets);
  }
  foreach ($facets as $facet) {
    if (preg_replace('/facets\[\d*\]=/i', '', $facet) == $term_cat . ':' . $term_name) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Check the URI and drop pager parameter, if available.
 *
 * @return string
 *   Cleaned URI.
 */
function _ding_facetbrowser_parse_request_uri() {
  $new_query_part = array();

  if (!stristr(request_uri(), '?')) {
    return request_uri();
  }

  $request_uri_parts = explode('?', request_uri());

  $query = rawurldecode(end($request_uri_parts));
  $query_parts = explode('&', $query);
  foreach ($query_parts as $key => $part) {
    if (preg_match('/^page\=/', $part)) {
      unset($query_parts[$key]);
      continue;
    }
    if (stristr($part, '=')) {
      $decode_part = explode('=', $part);
      $decode_part[1] = rawurlencode($decode_part[1]);
      $part = implode('=', $decode_part);
    }
    $new_query_part[] = $part;
  }
  $query = $new_query_part;
  return $request_uri_parts[0] . '?' . implode('&', $query);
}

/**
 * Parse the facets from the $form_state to a ting_search readable string.
 *
 * @param array $form_state
 *   The form_state array.
 *
 * @return string
 *   Parsed string.
 */
function _ding_facetbrowser_facet_string(array $form_state = NULL) {
  $facets = array();
  if (!empty($form_state['values']) && is_array($form_state['values'])) {
    foreach ($form_state['values'] as $name => $data) {
      if (is_array($data)) {
        foreach ($data as $key => $value) {
          if ($key == $value && $value !== 0) {
            $facets[] = 'facet.' . $name . ':' . $value;
          }
        }
      }
    }
  }
  return implode(';', $facets);
}

/**
 * Implements theme_facetbrowser().
 *
 * Default theme function for the facet browser.
 */
function theme_facetbrowser($variables) {
  $elements = array();
  if (!empty($variables['search_result'])) {
    $form = drupal_get_form('ding_facetbrowser_form', $variables['search_result']);
    $elements[] = drupal_render($form);
  }
  return implode('', $elements);
}

/**
 * Implements hook_block_view().
 */
function ding_facetbrowser_block_view($delta = FALSE) {
  $block = array();
  $block_content = FALSE;
  $content_in_facet = FALSE;
  $executed_search_module = FALSE;

  // Invoke ding_facetbrowser() from executed search module.
  $executed_search = menu_get_item();
  if (!empty($executed_search['page_arguments'])) {
    list($executed_search_module,) = $executed_search['page_arguments'];
  }
  if (is_string($executed_search_module)) {
    $results = module_invoke($executed_search_module, 'ding_facetbrowser');
    if (is_object($results)) {
      foreach ($results->facets as $result) {
        if (count($result->terms) == TRUE) {
          $content_in_facet = TRUE;
          break;
        }
      }
      if ($content_in_facet === TRUE || $results->show_empty == TRUE) {
        $block_content = theme('facetbrowser', array($results->facets, (!empty($results->searchkey) ? $results->searchkey : NULL)));
      }
    }

    $path = drupal_get_path('module', 'ding_facetbrowser');
    switch ($delta) {
      case 'facetbrowser':
        $block['subject'] = t('Facet browser');
        $block['content']['#markup'] = $block_content;
        $block['content']['#attached'] = array(
          'js' => array(
            array(
              'data' => $path . '/js/ding_facetbrowser.js',
            ),
            array(
              'data' => array(
                'ding_facetbrowser' => array(
                  'selector' => '.js-facet-browser-toggle',
                  'number_of_terms' => variable_get('ding_facetbrowser_number_of_terms', 5),
                ),
              ),
              'type' => 'setting',
            ),
          ),
          'libraries_load' => array(
            array('js.cookie'),
          ),
        );
        break;
    }
  }

  return $block;
}
