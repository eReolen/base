diff --git a/profiles/ding2/modules/ding_popup/ding_popup-popupbar.js b/profiles/ding2/modules/ding_popup/ding_popup-popupbar.js
deleted file mode 100644
index 6cb66a4..0000000
--- a/profiles/ding2/modules/ding_popup/ding_popup-popupbar.js
+++ /dev/null
@@ -1,167 +0,0 @@
-/*jshint forin:false, jquery:true, browser:true, indent:2, trailing:true, unused:false */
-
-(function (scope, $) {
-  'use strict';
-
-  var
-    POPUPBAR_CLASS_OPEN = 'popupbar-is-open',
-    POPUPBAR_CLASS_SELECTED = 'selected',
-
-    /**
-     * The jQuery popupbar object.
-     */
-    _$popupbar = null,
-
-    /**
-     * The jQuery container object.
-     */
-    _$container = null;
-
-  if (scope.ddbasic === undefined) {
-    scope.ddbasic = {};
-  }
-
-  /**
-   * The popupbar object.
-   */
-  scope.ddbasic.popupbar = {
-    /**
-     * Get the popupbar jQuery object.
-     */
-    bar: function () {
-      if (_$popupbar === null) {
-        _$popupbar = $('#popupbar');
-
-        if (_$popupbar.length === 0) {
-          _$popupbar = $('<div id="popupbar" class="popupbar" />').appendTo($('body'));
-        }
-      }
-
-      return _$popupbar;
-    },
-
-    /**
-     * Get the popupbar container jQuery object.
-     */
-    container: function () {
-      if (_$container === null) {
-        _$container = this.bar().children('popupbar-container');
-
-        if (_$container.length === 0) {
-          _$container = $('<div class="popupbar-container" />').appendTo(this.bar());
-
-          var self = this;
-          $('<a href="#" class="popupbar-close">' + Drupal.t('Close') + '</a>')
-            .on('click', function (evt) {
-              evt.preventDefault();
-              self.close();
-            })
-            .appendTo(_$container);
-        }
-      }
-
-      return _$container;
-    },
-
-    /**
-     * Set the content of the popupbar.
-     *
-     * This actually sets the content of a specific popupbar-content element
-     * keyed by it's name.
-     *
-     * @param {string} name
-     *   Identifier of the popup content.
-     * @param {jQuery} $element
-     *   The content of the popup.
-     * @param {boolean} dont_open [description]
-     *   Automatically open upthe popupbar.
-     * @param {function} onclose   [description]
-     *   function to be called when popupbar is closed while displaying this
-     *   specific content.
-     *
-     * @return {jQuery}
-     *   The popupbar content jQuery object.
-     */
-    set: function (name, $element, dont_open, onclose) {
-      var
-        $container = this.container(),
-        $content = $('#popupbar-' + name);
-
-      if ($content.length === 0) {
-        $content = $('<div id="popupbar-' + name + '" class="popupbar-content" />').appendTo($container);
-      }
-
-      if ($element !== null) {
-        $content.children().remove().end().append($element);
-      }
-
-      $container.children('.' + POPUPBAR_CLASS_SELECTED).removeClass(POPUPBAR_CLASS_SELECTED);
-      $content.addClass(POPUPBAR_CLASS_SELECTED);
-
-      this.bar().height($content.outerHeight(true));
-
-      if (dont_open !== true) {
-        var self = this;
-        setTimeout(function () {
-          self.open();
-        }, 16);
-      }
-
-      $content.data('onclose', onclose);
-
-      return $content;
-    },
-
-    /**
-     * Close the popupbar.
-     */
-    close: function () {
-      var
-        $content = this.container().children('.' + POPUPBAR_CLASS_SELECTED),
-        onclose = $content.data('onclose');
-
-      if (typeof onclose === 'function' && onclose() === false) {
-        return this;
-      }
-
-      $('body')
-        .removeClass(POPUPBAR_CLASS_OPEN)
-        .unbind('click.popupbar');
-
-      $(window).trigger('dingpopup-close');
-
-      return this;
-    },
-
-    /**
-     * Open the popupbar.
-     */
-    open: function () {
-      var self = this;
-
-      $('body')
-        .addClass(POPUPBAR_CLASS_OPEN)
-        .bind('click.popupbar', function (evt) {
-          if ($(evt.target).closest('#popupbar').length === 0) {
-            self.close();
-          }
-        });
-
-      return this;
-    },
-
-    /**
-     * Toggle the popupbar.
-     */
-    toggle: function () {
-      if (!$('body').hasClass(POPUPBAR_CLASS_OPEN)) {
-        this.open();
-      } else {
-        this.close();
-      }
-
-      return this;
-    }
-  };
-
-})(this, jQuery);
diff --git a/profiles/ding2/modules/ding_popup/ding_popup.js b/profiles/ding2/modules/ding_popup/ding_popup.js
index d57078f..333a31a 100644
--- a/profiles/ding2/modules/ding_popup/ding_popup.js
+++ b/profiles/ding2/modules/ding_popup/ding_popup.js
@@ -1,74 +1,123 @@
-/*jshint forin:false, jquery:true, browser:true, indent:2, trailing:true, unused:false, -W084 */
 
 (function ($) {
-  'use strict';
-
-  var
-    states = {},
-    refresh = false;
 
   /**
-   * Command to create a popup.
+   * Add keypress handler.
+   *
+   * This catches return and submits the form by triggering the first
+   * submit button. Otherwise the browser standard handler is used,
+   * and it doesn't post by AJAX.
+   *
+   * @todo possibly support more input types.
    */
-  Drupal.ajax.prototype.commands.ding_popup = function (ajax, response, status) {
-    var onclose;
-
-    // Ensure that the page is not reload, when the log in dialog is closed.
-    if (response.refresh === true || (refresh === true && response.name !== 'ding_user')) {
-      onclose = function () {
-        location.reload(true);
-        return false;
-      };
-    }
-
-    if (states[response.name] === undefined) {
-      states[response.name] = [];
-    }
-    if (response.resubmit === true) {
-      response.orig_ajax = ajax;
-      states[response.name].push(response);
+  Drupal.behaviors.ding_popup_form_submit = {
+    attach: function (context, settings) {
+      $('.ui-dialog-content input[type=text]:not(.ding-popup-processed), .ui-dialog-content input[type=password]:not(.ding-popup-processed)').addClass('ding-popup-processed').each(function () {
+        $(this).keypress(function (event) {
+          if (event.which == 13) {
+            $($(this.form).find('input[type=submit]').get(0)).trigger('mousedown');
+            return false;
+          }
+        });
+      });
     }
-
-    var $content = ddbasic.popupbar.set(response.name, response.data, false, onclose);
-    Drupal.attachBehaviors($content);
   };
 
   /**
-   * Command to close a popup.
+   * Object to handle popups.
    */
-  Drupal.ajax.prototype.commands.ding_popup_close = function (ajax, response, status) {
-    var state;
-    if (states[response.name] !== undefined) {
-      while (state = states[response.name].pop()) {
-        // User login have been performed, so page needs to be reloaded.
+  Drupal.ding_popup = {
+    refresh: false,
+    states: {},
+    dialogs: {},
+
+    setState: function (response) {
+      var self = this;
+      if (this.dialogs[response.name] == undefined) {
+        this.dialogs[response.name] = $('<div class="ding-popup-content"></div>').dialog({
+          autoOpen: false,
+          width: 'auto',
+          resizable: false,
+          dialogClass: response.class.join(' '),
+          modal: true,
+          draggable: false,
+          closeText : Drupal.t('close'),
+          close: function(event, ui) {
+            if (response['refresh'] || self.refresh === true) {
+              // Ensure that the page is not reload, when the log in dialog is
+              // closed.
+              if (self.refresh && response.name === 'ding_user') {
+                return;
+              }
+              window.location.reload(true);
+            }
+            else {
+              // Unload content. Needed if the content was a video,
+              // for instance.
+              $(this).empty();
+            }
+
+          }
+        });
+      }
+      // Pass dialog options on the the actual dialog.
+      // We could check the options for validity, but for now we just
+      // pass everything on to the dialog.
+      if (response.extra_data.dialog_options) {
+        this.dialogs[response.name].dialog('option', response.extra_data.dialog_options);
+      }
+      this.dialogs[response.name].dialog('option', {'title': response.title});
+      this.dialogs[response.name].html(response.data);
+
+      Drupal.attachBehaviors(this.dialogs[response.name]);
+      this.dialogs[response.name].dialog('open');
+    },
+
+    open: function(response) {
+      if (this.states[response.name] == undefined) {
+        this.states[response.name] = [];
+      }
+      if (response['resubmit']) {
+        this.states[response.name].push(response);
+      }
+      this.setState(response);
+    },
+
+    close: function(response) {
+      while (this.states[response.name].length > 0) {
+        var state = this.states[response.name].pop();
+        Drupal.detachBehaviors(this.dialog);
+
+        // User login have been preformed, so page need to be reloaded.
         if (state.name === 'ding_user') {
-          refresh = true;
+          this.refresh = true;
         }
 
         // Add in extra post vars.
-        $.extend(state.orig_ajax.options.data, state.extra_data);
+        $.extend(state['orig_ajax'].options.data, state['extra_data']);
         // Call original ajax callback.
-        state.orig_ajax.eventResponse(state.orig_ajax, null);
+        state['orig_ajax'].eventResponse(state['orig_ajax'], null);
       }
+      if (this.dialogs[response.name].refresh_on_close) {
+        alert('refresh');
+      }
+      this.dialogs[response.name].dialog('close');
     }
+  };
 
-    // If the global refresh is true the ajax will reload after the popup is
-    // closed. This allows for responses before refreshing.
-    if (refresh === false && response.refresh === true) {
-      location.reload(true);
-      return;
-    }
-
-    ddbasic.popupbar.close();
+  /**
+   * Command to create a popup.
+   */
+  Drupal.ajax.prototype.commands['ding_popup'] = function (ajax, response, status) {
+    response['orig_ajax'] = ajax;
+    Drupal.ding_popup.open(response);
   };
 
-  Drupal.behaviors.popupbar = {
-    attach: function(context, settings) {
-      $('.close-popupbar', context).on('click', function (evt) {
-        evt.preventDefault();
-        ddbasic.popupbar.close();
-      });
-    }
+  /**
+   * Command to close a popup.
+   */
+  Drupal.ajax.prototype.commands['ding_popup_close'] = function (ajax, response, status) {
+    Drupal.ding_popup.close(response);
   };
 
 })(jQuery);
diff --git a/profiles/ding2/modules/ding_popup/ding_popup.module b/profiles/ding2/modules/ding_popup/ding_popup.module
index 7f36acd..1a99948 100644
--- a/profiles/ding2/modules/ding_popup/ding_popup.module
+++ b/profiles/ding2/modules/ding_popup/ding_popup.module
@@ -14,8 +14,9 @@ function ajax_command_ding_popup($name, $title, $html, $options = array()) {
     'resubmit' => FALSE,
     'extra_data' => array(),
     'refresh' => FALSE,
+    'class' => array(),
   );
-  drupal_add_js(drupal_get_path('module', 'ding_popup') . '/ding_popup-popupbar.js');
+  drupal_add_library('system', 'ui.dialog');
   drupal_add_js(drupal_get_path('module', 'ding_popup') . '/ding_popup.js');
 
   return array(
@@ -26,19 +27,16 @@ function ajax_command_ding_popup($name, $title, $html, $options = array()) {
     'resubmit' => (bool) $options['resubmit'],
     'extra_data' => $options['extra_data'],
     'refresh' => (bool) $options['refresh'],
+    'class' => $options['class'],
   );
 }
 
 /**
  * Ajax command to close a popup.
  */
-function ajax_command_ding_popup_close($name, $refresh = FALSE) {
-  drupal_add_js(drupal_get_path('module', 'ding_popup') . '/ding_popup-popupbar.js');
-  drupal_add_js(drupal_get_path('module', 'ding_popup') . '/ding_popup.js');
-
+function ajax_command_ding_popup_close($name) {
   return array(
     'command' => 'ding_popup_close',
     'name' => $name,
-    'refresh' => $refresh,
   );
 }
