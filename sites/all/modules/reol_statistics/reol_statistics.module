<?php

/**
 * @file
 * Statistics of loans.
 */

define('REOL_STATISTICS_DEFAULT_TITLE', 'Statistics for loans by UNI•Login users');
define('REOL_STATISTICS_DEFAULT_HEADER', "Dato: @date\nKommunenavn: @municipality\nTilmeldte elever i kommunen: @subscribed_users");

/**
 * Implements hook_publizon_loan().
 */
function reol_statistics_publizon_loan($account, $name, $isbn, $retailer_id) {
  // We generate an unique hash from our private key and user uid. Hopefully
  // this is enough disassociation between user and loans.
  $user_hash = hash('sha512', drupal_get_private_key() . $account->uid);
  $data = array(
    'timestamp' => REQUEST_TIME,
    'retailer_id' => $retailer_id,
    'user_hash' => $user_hash,
    'isbn' => $isbn,
  );
  $unilogin_data = array();

  if (isset($_SESSION['unilogin_data'])) {
    $unilogin_data = $_SESSION['unilogin_data'];
  }
  elseif (function_exists('ding_unilogin_authenticated') &&
          ding_unilogin_authenticated($account)) {
    watchdog(
      'reol_statistics',
      'Looking up UNI•Login data on loan.',
      array(),
      WATCHDOG_WARNING
    );
    // Have another try at adding UNI•Login data, and allow for partial data.
    $unilogin_data = _reol_statistics_get_unilogin_data($name, TRUE);
  }

  $sid = db_insert('reol_statistics_loans')
    ->fields($data)
    ->execute();

  if ($sid && $unilogin_data) {
    $unilogin_data['sid'] = $sid;
    db_insert('reol_statistics_unilogin')
      ->fields($unilogin_data)
      ->execute();
  }
}

/**
 * Implements hook_ding_unilogin_login().
 *
 * Store statistics details in session for later logging.
 */
function reol_statistics_ding_unilogin_login($user) {
  $unilogin_data = _reol_statistics_get_unilogin_data($user->getName());
  if (empty($unilogin_data)) {
    watchdog(
      'reol_statistics',
      'UNI•Login failure, denying login for %user.',
      array('%user' => $user->getName()),
      WATCHDOG_ERROR
    );
    throw new Exception('Error communicating with UNI•Login');
  }

  $_SESSION['unilogin_data'] = $unilogin_data;
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function reol_statistics_menu() {
  $items = array();

  $items['statistics'] = array(
    'title' => 'Select municipality',
    'page callback' => 'reol_statistics_select_municipality_page',
    // Let anyone see statistics (let's see if anyone complains).
    'access callback' => TRUE,
    'file' => 'reol_statistics.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['statistics/municipality/%publizon_library/%reol_statistics_month/%reol_statistics_month'] = array(
    'title' => 'Statistics',
    'title callback' => 'variable_get',
    'title arguments' => array('reol_statistics_title', REOL_STATISTICS_DEFAULT_TITLE),
    'page callback' => 'reol_statistics_municipality_page',
    'page arguments' => array(2, 3, 4),
    // Let anyone see statistics (let's see if anyone complains).
    'access callback' => TRUE,
    'file' => 'reol_statistics.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['statistics/general/%reol_statistics_month/%reol_statistics_month'] = array(
    'title' => 'Statistics',
    'page callback' => 'reol_statistics_general_page',
    'page arguments' => array(2, 3),
    // Let anyone see statistics (let's see if anyone complains).
    'access callback' => TRUE,
    'file' => 'reol_statistics.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['statistics/publizon/%publizon_library'] = array(
    'title' => 'Publizon municipality count',
    'page callback' => 'reol_statistics_publizon_page',
    'page arguments' => array(2),
    // Let anyone see statistics (let's see if anyone complains).
    'access callback' => TRUE,
    'file' => 'reol_statistics.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/ereolen/statistics'] = array(
    'title' => 'Statistics',
    'description' => 'Configure statistics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reol_statistics_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'reol_statistics.admin.inc',
  );

  return $items;
}

/**
 * Menu loader.
 */
function reol_statistics_month_load($string) {
  if (preg_match('/^\d{6}$/', $string)) {
    return ReolStatisticsMonth::fromInt($string);
  }

  return FALSE;
}

/**
 * Menu loader.
 */
function reol_statistics_municipality_load($string) {
  if (preg_match('/^\d+$/', $string)) {
    $library = publizon_get_library($string);
    if (!empty($library)) {
      return $library;
    }
  }

  return FALSE;
}

/**
 * Implements hook_cron().
 */
function reol_statistics_cron() {
  $statistics = reol_statistics_get();

  foreach ($statistics as $statistic) {
    if ($statistic instanceof ReolStatisticsISBN) {
      // Crunching data for ReolStatisticsISBN takes too much time and must be
      // handled by calling `drush reol-statistics-crunch-isbn` outside the
      // Drupal cron schedule.
      continue;
    }

    $varname = 'reol_statistics_last_queued_' . get_class($statistic);
    if (reol_statistics_ensure_schema($statistic)) {
      variable_del($varname);
    }
    $month = ReolStatisticsMonth::fromInt(variable_get($varname, 201609));

    while (!$month->isCurrent()) {
      $queue = DrupalQueue::get('statistics_backlog_processing');
      $payload = array(
        'class' => get_class($statistic),
        'month' => $month->toInt(),
      );
      $queue->createItem($payload);
      $month = $month->next();
      variable_set($varname, $month->toInt());
    }

    // Always queue a run of the current month.
    $queue = DrupalQueue::get('statistics_processing');
    $payload = array(
      'class' => get_class($statistic),
      'month' => $month->toInt(),
    );
    $queue->createItem($payload);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function reol_statistics_cron_queue_info() {
  // Processing of current month.
  $queues['statistics_processing'] = array(
    'worker callback' => 'reol_statistics_worker',
    'time' => 120,
  );

  // Backlog processing.
  $queues['statistics_backlog_processing'] = array(
    'worker callback' => 'reol_statistics_worker',
    'time' => 120,
  );

  return $queues;
}

/**
 * Cron worker callback.
 *
 * Collects statistics for one month for one statistic.
 */
function reol_statistics_worker($data) {
  $class = $data['class'];
  $statistic = new $class();
  $statistic->collect(ReolStatisticsMonth::fromInt($data['month']));
}

/**
 * Returns statistics classes.
 */
function reol_statistics_get() {
  $classes = &drupal_static(__FUNCTION__, NULL);

  if (!$classes) {
    $classes = array(
      new ReolStatisticsMunicipality(),
      new ReolStatisticsSchool(),
      new ReolStatisticsISBN(),
      new ReolStatisticsMunicipalityRank(),
    );
  }

  return $classes;
}

/**
 * Ensure that statistics schema is up to date.
 *
 * @return bool
 *   Whether the schema was re-built.
 */
function reol_statistics_ensure_schema(ReolStatisticsInterface $statistic) {
  $reset = FALSE;
  $schema = $statistic->schema();
  foreach ($schema as $table => $def) {
    $hash = md5(serialize($def));
    if ($hash != variable_get($table . '_md5', NULL)) {
      // Schema changed, rebuild.
      db_drop_table($table);
      db_create_table($table, $def);
      variable_set($table . '_md5', $hash);
      $reset = TRUE;
    }
  }

  if ($reset && method_exists($statistic, 'reset')) {
    $statistic->reset();
  }

  return $reset;
}

/**
 * Reset statistics, causing a rerun.
 */
function reol_statistics_reset_all() {
  $statistics = reol_statistics_get();

  foreach ($statistics as $statistic) {
    reol_statistics_reset($statistic);
  }
}

/**
 * Reset a statistic.
 */
function reol_statistics_reset(ReolStatisticsInterface $statistic) {
  $varname = 'reol_statistics_last_queued_' . get_class($statistic);
  $schema = $statistic->schema();
  foreach (array_keys($schema) as $table) {
    // Delete table. It will be recreated.
    db_drop_table($table);
    variable_del($table . '_md5');
  }
  variable_del($varname);
}

/**
 * Get UNI•Login log data for name.
 *
 * @param string $name
 *   Name of user to get data for.
 * @param bool $partial
 *   Whether to return partial result in case of failure.
 *
 * @return array
 *   Array of collected data or an empty array.
 */
function _reol_statistics_get_unilogin_data($name, $partial = TRUE) {
  $unilogin_data = array();

  if (!function_exists('ding_unilogin_authenticated')) {
    return $unilogin_data;
  }
  // Catch all exceptions and ignore them.
  try {
    $user_service = ding_unilogin_wservice('user');
    $institution_service = ding_unilogin_wservice('inst');
    $institutions = $user_service->getUserInstitutions($name);
    $institutions = ding_unilogin_filter_institutions($institutions);
    if (!$institutions) {
      watchdog(
        'reol_statistics',
        'Cannot get institutions for %user.',
        array('%user' => $name),
        WATCHDOG_ERROR
      );
    }

    $inst = NULL;
    // Find the first usable institution.
    foreach ($institutions as $institution_id) {
      $institution = $institution_service->getInstitution($institution_id);
      if (isset($institution->kommunenr)) {
        $libraries = publizon_filter_libraries_list(array($institution->kommunenr));
        if (!empty($libraries)) {
          $inst = $institution;
          break;
        }
      }
    }

    if (!$inst) {
      watchdog(
        'reol_statistics',
        'Cannot get institution for %user.',
        array('%user' => $name),
        WATCHDOG_ERROR
      );
    }
    else {
      $unilogin_data['school_id'] = $inst->instnr;
      $unilogin_data['school'] = $inst->instnavn;
      $unilogin_data['municipality_id'] = $inst->kommunenr;
      $unilogin_data['municipality'] = $inst->kommune;
      // We're not fetching this anymore, but keeping the column for the
      // existing data.
      $unilogin_data['class'] = '';
    }
  }
  catch (Exception $e) {
    // Wipe partial result, unless it was requested.
    if (!$partial) {
      $unilogin_data = array();
    }
  }

  return $unilogin_data;
}

/**
 * Interface for the statistics classes.
 */
interface ReolStatisticsInterface {

  /**
   * Returns schema for this statistic.
   */
  public function schema();

  /**
   * Collect this statistic.
   *
   * Run in cron.
   *
   * @param ReolStatisticsMonth $month
   *   Month to collect statistics for.
   */
  public function collect(ReolStatisticsMonth $month);

}

/**
 * Interface for general statistics building.
 */
interface ReolStatisticsGeneralInterface {

  /**
   * Build statistic display.
   *
   * @param ReolStatisticsMonth $from
   *   From date, integer in yyyymm format.
   * @param ReolStatisticsMonth $to
   *   To date, integer in yyyymm format, inclusive.
   */
  public function buildGeneral(ReolStatisticsMonth $from, ReolStatisticsMonth $to);

}
/**
 * Interface for municipality statistics building.
 */
interface ReolStatisticsMunicipalityInterface {

  /**
   * Build statistic display.
   *
   * @param PublizonConfiguredLibrary $library
   *   The library as returned from publizon_get_library().
   * @param ReolStatisticsMonth $from
   *   From date, integer in yyyymm format.
   * @param ReolStatisticsMonth $to
   *   To date, integer in yyyymm format, inclusive.
   */
  public function buildMunicipality(PublizonConfiguredLibrary $library, ReolStatisticsMonth $from, ReolStatisticsMonth $to);

}
