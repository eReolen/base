<?php
/**
 * @file
 * Extend the site with information about titles hosted at overdrive.
 */

/**
 * Implements hook_menu().
 */
function overdrive_menu() {
  $items = array();

  $items['ting/object/%ting_object/overdrive'] = array(
    'page callback' => 'overdrive_loan_redirect_ajax',
    'page arguments' => array(2),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('perform loan'),
  );

  $items['admin/config/ereolen/overdrive'] = array(
    'title' => 'Overdrive',
    'description' => 'Administer overdrive (eReolen Global)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('overdrive_settings_form'),
    'access arguments' => array('administer overdrive'),
    'file' => 'includes/overdrive.admin.inc',
  );

  $items['admin/config/ereolen/overdrive/settings'] = array(
    'title' => 'Overdrive settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/ereolen/overdrive/mapping'] = array(
    'title' => 'Overdrive mapping',
    'description' => 'Administer mapping (eReolen Global)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('overdrive_mappings_form'),
    'access arguments' => array('administer overdrive'),
    'file' => 'includes/overdrive.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function overdrive_permission() {
  return array(
    'administer overdrive' => array(
      'title' => t('Administer overdrive'),
      'description' => t('Administer overdrive - eReolen Global'),
    ),
  );
}

/**
 * Implements hook_secure_permissions().
 */
function overdrive_secure_permissions($role) {
  $permissions = array(
    'administrators' => array(
      'administer overdrive',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_theme().
 */
function overdrive_theme($existing, $type, $theme, $path) {
  return array(
    'overdrive_message' => array(
      'variables' => array(
        'message' => '',
        'uri' => '',
        'modal_id' => 'overdrive-message',
      ),
      'template' => 'overdrive-message',
      'path' => $path . '/templates/',
    ),
  );
}

/**
 * Implements hook_ting_covers().
 *
 * Get covers for overdrive titles form the data-well relations.
 */
function overdrive_ting_covers($entities) {
  $covers = array();
  foreach ($entities as $id => $entity) {
    // Check that the entity is an overdrive entity based on it's PID. We make this extra check at getting relations
    // for a entity may trigger extra requests to the data-well which is expensive. So lets limit that.
    if (strpos($id, ':ODN') !== false) {
      $uri = '';
      $relations = $entity->getRelations();
      foreach ($relations as $relation) {
        if ($relation->getType() === 'dbcaddi:hasCover') {
          $uri = $relation->getURI();
          break;
        }
      }

      if (!empty($uri)) {
        $covers[$id] = $uri;
      }
    }
  }

  return $covers;
}

/**
 * Implements hook_ding_entity_buttons().
 *
 * Add read/listen buttons on entity view page for audiobook or ebook.
 */
function overdrive_ding_entity_buttons($type, $entity) {
  $buttons = array();

  if (strpos($entity->getId(), ':ODN') !== false) {
    drupal_add_library('system', 'drupal.ajax');

    $classes = array('btn');
    $type_class = reol_base_get_type_class($entity->type);
    switch ($type_class) {
      case "ebook":
        $text = t('Read', array(), array('context' => 'overdrive'));
        $html_id = 'read-' . $entity->id;
        break;

      case "audiobook":
        $text = t('Listen', array(), array('context' => 'overdrive'));
        $html_id = 'listen-' . $entity->id;
        break;
    }

    $classes[] = 'use-ajax';
    $classes[] = 'btn-block';
    $link = 'ting/object/' . $entity->id . '/overdrive';

    // Create the button.
    $buttons[] = reol_base_get_entity_button($text, $link, $html_id . $entity->id, $classes);
  }

  return $buttons;
}

/**
 * Ajax entry callback.
 *
 * Bookmark ting object/entity with ajax callback.
 *
 * @param TingEntity $entity
 *   Ting entity object.
 *
 * @return array
 *   Render array with Ajax commands.
 */
function overdrive_loan_redirect_ajax(TingEntity $entity) {
  $commands = array();
  $modal_id = 'overdrive-message';

  // Try to find the URI for overdrive.
  $uri = '';
  foreach ($entity->getRelations() as $relation) {
    if ($relation->type == 'dbcaddi:hasOnlineAccess') {
      $uri = $relation->getURI();
      break;
    }
  }

  if (!(is_object($entity) && $entity instanceof TingEntity) || empty($uri) ) {
    $close = reol_base_get_modal_close_button(t('OK'), $modal_id);
    $commands[] = ajax_command_ding_popup($modal_id, t('Error'), '<p>' . t('Unable to load information about the material.') . '</p>' . $close);
  }
  else {
    $default = variable_get('overdrive_information_text', array(
      'value' => 'Please goto /admin/config/ereolen/overdrive and configure this text.',
    ));

    $vars = array(
      'message' => $default['value'],
      'uri' => $uri,
      'modal_id' => 'overdrive-message',
    );

    // Display pop-up and add JS to handle cancel button.
    drupal_add_js(drupal_get_path('module', 'reol_base') . '/js/reol_base.js');
    $commands[] = ajax_command_ding_popup($modal_id, t('Loan'), theme('overdrive_message', $vars));

  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Save or update the triggers in the database.
 *
 * If the tid is -1 this will be insert else an update operation.
 *
 * @param array $triggers
 *   The triggers.
 */
function overdrive_triggers_save(array $triggers) {
  foreach ($triggers as $trigger) {
    if ($trigger['tid'] == -1) {
      unset($trigger['tid']);
      drupal_write_record('overdrive_triggers', $trigger);
    }
    else {
      drupal_write_record('overdrive_triggers', $trigger, 'tid');
    }
  }
}

/**
 * Load all triggers from the database.
 *
 * @return array
 *   The triggers.
 */
function overdrive_triggers_load() {
  $triggers = db_select('overdrive_triggers', 'ot')
    ->fields('ot')
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);

  return $triggers;
}

/**
 * Implements hook_ting_covers().
 */
function overdrive_trigger_find($search_string) {
  return db_select('overdrive_triggers', 'ot')
    ->fields('ot')
    ->condition('search_trigger', $search_string)
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * Add search mapping between danish and english.
 *
 * @param string $search_string
 *   Search string from the user.
 *
 * @return string
 */
function overdrive_search_mapping($search_string) {
  $str = '';

  $triggers = overdrive_trigger_find($search_string);
  foreach ($triggers as $trigger) {
    $str .= ' or (' . $trigger['search_query'] . ')';
  }

  return $str;
}
