<?php

/**
 * @file
 * Code for the eReolen use loan module feature.
 */

/**
 * Implements hook_menu().
 */
function reol_use_loan_menu() {
  $items = array();

  $items['ting/object/%/read'] = array(
    'page callback' => 'reol_use_loan_read',
    'page arguments' => array(2),
    'delivery callback' => 'reol_use_loan_deliver_html_page',
    'access callback' => TRUE,
  );

  $items['ting/object/%/listen'] = array(
    'page callback' => 'reol_use_loan_listen',
    'delivery callback' => 'reol_use_loan_deliver_html_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );

  $items['reol_use_loan/reader/session/renew/%'] = array(
    'page callback' => 'reol_use_loan_reader_renew_session',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
  );

  $items['ting/object/%/%/ajax'] = array(
    'page callback' => 'reol_use_loan_use_loan_ajax',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function reol_use_loan_theme($existing, $type, $theme, $path) {
  return array(
    'reol_use_loan_html' => array(
      'variables' => array(
        'vars' => NULL,
      ),
      'path' => $path,
      'template' => 'templates/html',
    ),
    'reol_use_loan_read' => array(
      'variables' => array(
        'retailer_order_number' => NULL,
        'isbn' => NULL,
        'reader_version' => NULL,
        'publizon_reader_stream_url' => NULL,
        'publizon_reader_url' => NULL,
      ),
      'path' => $path,
      'template' => 'templates/read',
    ),
    'reol_use_loan_listen' => array(
      'variables' => array(
        'isbn' => NULL,
        'internal_order_number' => NULL,
      ),
      'path' => $path,
      'template' => 'templates/listen',
    ),
  );
}

/**
 * Implements hook_ding_session_cache_defaults().
 *
 * Set default ding_session_cache settings and tell ding_session_cache that this
 * module supports it.
 */
function reol_use_loan_ding_session_cache_defaults() {
  return array(
    'title' => 'eReolen session renew cache',
    'enabled' => TRUE,
    'expire' => 10800,
  );
}

/**
 * Page deliver callback for publizon reader/player.
 *
 * @param mixed $page_callback_result
 *   Page content as render array.
 *
 *   The players form publizon has issues with the JavaScript form
 *   Drupal and DDB CMS core. So this callback makes an minimal
 *   page to display the readers.
 *
 * @TODO: Added fav-icon rel headers to rendered page.
 * @throws \Exception
 */
function reol_use_loan_deliver_html_page($page_callback_result) {
  // Cache control for user pages.
  drupal_add_http_header('Cache-Control', 'no-store, must-revalidate');
  drupal_add_http_header('Pragma', 'no-cache');

  // Menu status constants are integers; page content is a string or array.
  if (is_int($page_callback_result)) {
    // Fallback to Drupal's normal page deliver page.
    drupal_deliver_html_page($page_callback_result);
  }
  else {
    if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
      drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
    }

    // Send appropriate HTTP-Header for browsers and search engines.
    global $language;
    drupal_add_http_header('Content-Language', $language->language);

    // By default, do not allow the site to be rendered in an iframe on another
    // domain.
    drupal_add_http_header('X-Frame-Options', 'SAMEORIGIN');

    // Get basic stuff need to render HTML page.
    $variables['head'] = drupal_get_html_head();
    $variables['head_title'] = drupal_get_title();
    $variables['language'] = $language;
    $variables['styles'] = drupal_get_css(NULL, TRUE);

    $variables['scripts'] = drupal_get_js('player', NULL, TRUE);

    // Set page content.
    $variables['content'] = $page_callback_result;

    print theme('reol_use_loan_html', $variables);
    drupal_exit();
  }
}

/**
 * Menu callback to display e-book reader.
 *
 * @param string $id
 *   Ting object entity id.
 *
 * @return array
 *   Render array.
 *
 * @throws \DingProviderDoesntImplement
 * @throws \DingProviderNoProvider
 */
function reol_use_loan_read($id) {
  $local_id = _reol_use_load_get_local_id($id);

  /** @var \PublizonProduct $product */
  $product = publizon_load($local_id);

  $order = reol_use_loan_get_order($local_id);

  $render = array(
    '#theme' => 'reol_use_loan_read',
  );

  if (!$order) {
    $render['#isbn'] = reol_base_get_isbn($local_id);
  }
  else {
    // There is no order, start reader in preview mode.
    $render['#retailer_order_number'] = $order['retailer_order_number'];
  }

  $reader_version = variable_get('publizon_reader_version', '1.6.0');
  $publizon_reader_url = variable_get('publizon_reader_url', '');
  $module_url = drupal_get_path('module', 'reol_use_loan');
  $js_publizon_url = $publizon_reader_url . '/scripts/reader-' . $reader_version . '/js?' . time();

  $render['#reader_version'] = $reader_version;
  $render['#publizon_reader_stream_url'] = variable_get('publizon_reader_stream_url', '');
  $render['#publizon_reader_url'] = $publizon_reader_url;

  // Add dependencies.
  drupal_add_css($publizon_reader_url . '/scripts/reader-' . $reader_version . '/css', array(
    'type' => 'external',
    'scope' => 'player',
    'cache' => FALSE,
    'preprocess' => FALSE,
  ));

  // As jQuery update module is installed adding jQuery is a little tricky.
  $jquery = drupal_get_library('system', 'jquery');
  $jquery = reset($jquery['js']);
  drupal_add_js($jquery['data'], array(
    'type' => 'file',
    'scope' => 'player',
  ));

  drupal_add_js($js_publizon_url, array(
    'type' => 'external',
    'scope' => 'player',
    'cache' => FALSE,
    'preprocess' => FALSE,
  ));
  drupal_add_css($module_url . '/css/reader.css', array(
    'type' => 'file',
    'scope' => 'player',
  ));
  drupal_add_js($module_url . '/js/reader_standalone.js', array(
    'type' => 'file',
    'scope' => 'player',
  ));
  drupal_set_title($product->title . ' | ' . variable_get('site_name', ''));

  return $render;
}

/**
 * Menu callback to display audio-book reader.
 *
 * @param string $id
 *   Ting object entity id.
 *
 * @return array
 *   Render array.
 *
 * @throws \DingProviderDoesntImplement
 * @throws \DingProviderNoProvider
 */
function reol_use_loan_listen($id) {
  $local_id = _reol_use_load_get_local_id($id);

  /** @var \PublizonProduct $product */
  $product = publizon_load($local_id);

  $render = array(
    '#theme' => 'reol_use_loan_listen',
  );

  drupal_add_css(drupal_get_path('module', 'reol_use_loan') . '/css/player.css');
  drupal_set_title($product->title . ' | ' . variable_get('site_name', ''));

  $order = reol_use_loan_get_order($local_id);
  if (!$order) {
    // There is no order, start player in preview mode.
    $render['#title'] = t('Try');
    $render['#isbn'] = reol_base_get_isbn($local_id);
  }
  else {
    $render['#title'] = t('Listen');
    $render['#internal_order_number'] = $order['internal_order_number'];
  }

  return $render;
}

/**
 * Get reader session.
 *
 * Call the Publizon stream session API to get a session
 * for the reader.
 *
 * @param string $retailer_order
 *   Order id for the session to renew.
 */
function reol_use_loan_reader_renew_session($retailer_order) {
  $response = FALSE;
  if (module_exists('ding_session_cache')) {
    $response = ding_session_cache_get('reol_use_loan', $retailer_order, FALSE);
  }

  if (!$response) {
    // Make sure we have url to call.
    $url = variable_get('publizon_reader_stream_url', FALSE);
    if (!$url) {
      http_response_code(500);
      echo t('URL for the stream server has not been defined!');
      drupal_exit();
    }

    // Make sure we have client id.
    $client_id = variable_get('publizon_client_id', FALSE);
    if (!$client_id) {
      http_response_code(500);
      echo t('Client ID has not been defined!');
      drupal_exit();
    }

    // Get the retailer id on the user.
    $retailer_id = NULL;
    if (isset($_SESSION['ding_user']['user']['data']['retailer_id'])) {
      $retailer_id = $_SESSION['ding_user']['user']['data']['retailer_id'];
    }

    // Get information for request.
    $library = publizon_get_library($retailer_id);

    // Get response from endpoint.
    $response = reol_use_loan_get_reader_session($url, $retailer_order, $client_id, $library->retailer_id, md5($library->retailer_key_code));

    // Store the session into ding session cache.
    if (module_exists('ding_session_cache')) {
      ding_session_cache_set('reol_use_loan', $retailer_order, $response);
    }
  }

  // Write response to browser.
  drupal_add_http_header('Cache-Control', 'no-store, must-revalidate');
  drupal_add_http_header('Pragma', 'no-cache');
  http_response_code($response['status']);
  drupal_json_output();
  echo $response['result'];
  drupal_exit();
}

/**
 * Call the session callback for the reader, and return results.
 *
 * @param string $url
 *   The URL of the server.
 * @param string $retailer_order
 *   The retailer order number to pass along.
 * @param string $client_id
 *   The client id to pass along.
 * @param string $retailer_id
 *   The retailer id to pass along.
 * @param string $retailer_key_code
 *   The retailer key code to pass along.
 *
 * @return array
 *   Array with two keys; status and result.
 */
function reol_use_loan_get_reader_session($url, $retailer_order, $client_id, $retailer_id, $retailer_key_code) {
  // Initialize the cURL call.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url . '/publicstreaming/v1/' . $retailer_order . '/session/' . $client_id . '/' . $retailer_id . '/' . $retailer_key_code . '/');
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/xml'));
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 15);
  curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);

  // Execute it.
  $response = curl_exec($ch);
  $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);

  // Return code and result.
  return array('status' => $status, 'result' => $response);
}

/**
 * Implements hook_ding_entity_buttons().
 *
 * Add read/listen buttons on entity view page for audio-book or e-book.
 */
function reol_use_loan_ding_entity_buttons($type, $entity) {
  // Materials might be deleted in the well, but still loaned by a user. We need
  // to still make it available for use until it expires.
  $deleted = preg_match('/^publizon:/', $entity->ding_entity_id);
  $loaned = $available = FALSE;
  if (reol_loan_is_right_type($entity) || $deleted) {
    drupal_add_library('system', 'drupal.ajax');
    $text = t('Try');
    $link = '';
    if (!$deleted) {
      $availability_list = ding_availability_items(array($entity->localId));
      // Cop out if publizon doesn't know the material.
      if ($availability_list) {
        list($availability) = array_values($availability_list);

        $avail_mapped = _reol_loan_map_availability($availability, $entity->id);
        $loaned = $avail_mapped == REOL_LOAN_STATUS_LOANED;
        $available = $avail_mapped == REOL_LOAN_STATUS_LOANABLE || $avail_mapped == REOL_LOAN_STATUS_RESERVABLE;
        $type_class = reol_base_get_type_class($entity->type);
      }
    }
    else {
      $loaned = TRUE;
      $available = FALSE;
      $type_class = reol_base_get_type_class($entity->publizon_type);
    }

    // Only do something if title is in publizon.
    if ($loaned || $available) {
      $classes = array('btn', 'btn--try');
      switch ($type_class) {
        case "ebook":
          if ($loaned) {
            $text = t('Read');
          }
          $link = 'ting/object/' . $entity->id . '/read';
          $html_id = 'read-' . $entity->id;
          break;

        case "audiobook":
        case "podcast":
          $link = 'ting/object/' . $entity->id . '/listen';
          if ($loaned) {
            $text = t('Listen');
          }

          $link .= '/ajax';
          $classes[] = 'use-ajax';
          $html_id = 'listen-' . $entity->id;
          break;
      }

      // Create the button.
      $return = reol_base_get_entity_button($text, $link, $html_id . $entity->id, $classes);

      // Make sure that our button is displayed before the ones from reol_bookmark_ding_entity_buttons().
      $return['#weight'] = -1000;

      return array($return);
    }
  }
  return array();
}

/**
 * Try to get an order for a title.
 *
 * @param string $local_id
 *   The local id of the title to get order for.
 *
 * @return bool|mixed
 *   Array containing retailer and internal order numbers.
 *   FALSE on error.
 *
 * @throws \DingProviderDoesntImplement
 * @throws \DingProviderNoProvider
 */
function reol_use_loan_get_order($local_id) {
  global $user;
  $no_order = FALSE;
  try {
    $order = ding_provider_invoke('loan', 'get', $user, $local_id);
  }
  catch (DingProviderAuthException $e) {
    $no_order = TRUE;
  }

  if ($no_order || empty($order)) {
    return FALSE;
  }

  return $order;
}

/**
 * Deliver read/listen pages using ajax.
 *
 * @param string $id
 *   Ting object entity id.
 * @param string $type
 *   Either read or listen.
 *
 * @return array
 *   Array as expected by ajax_deliver.
 *
 * @throws \DingProviderDoesntImplement
 * @throws \DingProviderNoProvider
 */
function reol_use_loan_use_loan_ajax($id, $type) {
  $commands = array();

  // Figure out which page to load.
  $class = '';
  if ($type == "read") {
    $render = reol_use_loan_read($id);
    $class = 'try-ebook';
  }
  elseif ($type == "listen") {
    $render = reol_use_loan_listen($id);
    $class = 'try-audiobook';
  }

  $output = drupal_render($render);
  $commands[] = ajax_command_ding_popup('reol_use_loan', $render['#title'], $output, array('class' => array($class), 'refresh' => TRUE));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Helper function get get local id for an given id.
 *
 * @param string $id
 *   Id for material.
 *
 * @return string
 *   The local id prefixed with 'isbn_'.
 */
function _reol_use_load_get_local_id($id) {
  $local_id = reol_base_fake_id($id);
  if (!$local_id) {
    $entity = ting_object_load($id);
    $local_id = $entity->localId;
  }
  else {
    $local_id = REOL_BASE_LOCAL_ID_PREFIX . $local_id;
  }

  return $local_id;
}
