<?php

/**
 * @file
 * Code for the eReolen use loan module feature.
 */

include_once 'reol_use_loan.features.inc';

/**
 * Implements hook_menu().
 */
function reol_use_loan_menu() {
  $items = array();

  $items['reol_use_loan/reader/session/renew'] = array(
    'page callback' => 'reol_use_loan_reader_renew_session',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
  );

  $items['reol_use_loan/reader'] = array(
    'page callback' => 'reol_use_loan_reader',
    'page arguments' => array(2, 3),
    // The page checks for access.
    'access callback' => TRUE,
  );

  $items['ting/object/%ting_object/%/ajax'] = array(
    'page callback' => 'reol_use_loan_use_loan_ajax',
    'page arguments' => array(2, 3),
    // The page checks for access.
    'access callback' => TRUE,
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function reol_use_loan_permission() {
  return array(
    'listen to audiobook' => array(
      'title' => t('Listen to audiobook'),
      'description' => t('Listen to a loaned audiobook.'),
    ),
  );
}

/**
 * Implements hook_secure_permissions().
 *
 * Define which users should be able to perform a loan.
 */
function reol_use_loan_secure_permissions($role) {
  $permissions = array(
    'provider' => array(
      'listen to audiobook',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function reol_use_loan_ctools_plugin_directory($owner, $plugin_type) {
  return 'plugins/' . $plugin_type;
}

/**
 * Get reader session.
 *
 * Call the Publizon stream session API to get a session
 * for the reader.
 */
function reol_use_loan_reader_renew_session($id) {
  // Make sure we have url to call.
  if (!variable_get('publizon_reader_stream_url', FALSE)) {
    http_response_code(500);
    echo t('URL for the stream server has not been defined!');
    drupal_exit();
  }

  // Make sure we have client id.
  if (!variable_get('publizon_client_id', FALSE)) {
    http_response_code(500);
    echo t('Client ID has not been defined!');
    drupal_exit();
  }

  // Get the retailer id on the user.
  global $user;
  $profile = profile2_load_by_user($user, 'provider_publizon');
  $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
  $retailer_id = $profile_wrapper->field_publizon_retailer_id->value();

  // Get information for request.
  $client_id = variable_get('publizon_client_id', '');
  $retailer = publizon_get_library($retailer_id);
  $url = variable_get('publizon_reader_stream_url', '');

  // Get response from endpoint.
  $response = reol_use_loan_get_reader_session($url, $id, $client_id, $retailer->retailer_id, md5($retailer->retailer_key_code));

  // Write response to browser.
  http_response_code($response['status']);
  echo $response['result'];
  drupal_exit();
}

/**
 * Call the session callback for the reader, and return results.
 *
 * @param string $url
 *   The URL of the server.
 * @param string $retailer_order
 *   The retailer order number to pass along.
 * @param string $client_id
 *   The client id to pass along.
 * @param string $retailer_id
 *   The retailer id to pass along.
 * @param string $retailer_key_code
 *   The retailer key code to pass along.
 *
 * @return array
 *   Array with two keys; status and result.
 */
function reol_use_loan_get_reader_session($url, $retailer_order, $client_id, $retailer_id, $retailer_key_code) {
  // Initialize the cURL call.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url . '/publicstreaming/v1/' . $retailer_order . '/session/' . $client_id . '/' . $retailer_id . '/' . $retailer_key_code . '/');
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/xml'));

  // Execute it.
  $output = curl_exec($ch);
  $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);

  // Return code and result.
  return array('status' => $status, 'result' => $output);
}

/**
 * Render the page for the reader.
 *
 * @param string $id
 *   The retailer order number.
 */
function reol_use_loan_reader($id, $try = FALSE) {
  $vars = array();
  if ($try) {
    $vars['isbn'] = $id;
  }
  else {
    $vars['retailer_order_number'] = $id;
  }

  $vars['reader_version'] = variable_get('publizon_reader_version', '1.5.0');

  echo theme('reol_use_loan_reader', $vars);
  drupal_exit();
}

/**
 * Implements hook_theme().
 */
function reol_use_loan_theme($existing, $type, $theme, $path) {
  return array(
    'reol_use_loan_reader' => array(
      'variables' => array(
        'retailer_order_number' => NULL,
      ),
      'path' => drupal_get_path('module', 'reol_use_loan') . '/templates',
      'template' => 'reader',
    ),
  );
}

/**
 * Implements hook_ding_entity_buttons().
 *
 * Add read/listen buttons on entity view page for audiobook or ebook.
 */
function reol_use_loan_ding_entity_buttons($type, $entity) {
  // Materials might be deleted in the well, but still loaned by a user. We need
  // to still make it available for use until it expires.
  $deleted = preg_match('/^publizon:/', $entity->ding_entity_id);
  $loaned = $available = FALSE;
  if (reol_loan_is_right_type($entity) || $deleted) {
    drupal_add_library('system', 'drupal.ajax');
    $text = t('Try');
    $link = '';
    if (!$deleted) {
      $availability_list = ding_availability_items(array($entity->localId));
      // Cop out if publizon doesn't know the material.
      if ($availability_list) {
        list($availability) = array_values($availability_list);

        $avail_mapped = _reol_loan_map_availability($availability);
        $loaned = $avail_mapped == REOL_LOAN_STATUS_LOANED;
        $available = $avail_mapped == REOL_LOAN_STATUS_LOANABLE || $avail_mapped == REOL_LOAN_STATUS_RESERVABLE;
        $type_class = reol_base_get_type_class($entity->type);
      }
    }
    else {
      $loaned = TRUE;
      $available = FALSE;
      $type_class = reol_base_get_type_class($entity->publizon_type);
    }

    // Only do something if title is in publizon.
    if ($loaned || $available) {
      $classes = array('btn', 'btn--try');
      switch ($type_class) {
        case "ebook":
          if ($loaned) {
            $text = t('Read');
          }
          $link = 'ting/object/' . $entity->id . '/read';
          $html_id = 'read-' . $entity->id;
          break;

        case "audiobook":
        case "podcast":
          $link = 'ting/object/' . $entity->id . '/listen';
          if ($loaned) {
            $text = t('Listen');
          }
          else {
            $link .= '/ajax';
            $classes[] = 'use-ajax';
          }
          $html_id = 'listen-' . $entity->id;
          break;
      }

      // Create the button.
      $return = reol_base_get_entity_button($text, $link, $html_id . $entity->id, $classes);

      return array($return);
    }
  }
  return array();
}

/**
 * Try to get an order for a title.
 *
 * @param string $local_id
 *   The local id of the title to get order for.
 *
 * @return array
 *   Array containing retailer and internal order numbers.
 *   FALSE on error.
 */
function reol_use_loan_get_order($local_id) {
  global $user;
  $no_order = FALSE;
  try {
    $order = ding_provider_invoke('loan', 'get', $user, $local_id);
  }
  catch (DingProviderAuthException $e) {
    $no_order = TRUE;
  }

  if ($no_order || empty($order)) {
    return FALSE;
  }

  return $order;
}

/**
 * Deliver read/listen pages using ajax.
 *
 * @param TingEntity $ting_object
 *   The ting object from menu hook.
 * @param string $type
 *   Either read or listen.
 *
 * @return array|null
 *   Array as expected by ajax_deliver.
 */
function reol_use_loan_use_loan_ajax(TingEntity $ting_object, $type) {
  module_load_include('inc', 'page_manager', 'plugins/tasks/page');
  module_load_include('inc', 'ctools', 'includes/context');
  $commands = array();

  // Figure out which page to load.
  if ($type == "read") {
    $subtask_id = "read_ebook";
    $class = 'try-ebook';
  }
  elseif ($type == "listen") {
    $subtask_id = "listen_to_audiobook";
    $class = 'try-audiobook';
  }
  else {
    return;
  }

  // Load page argument context.
  $page = page_manager_page_load($subtask_id);
  $arg = $page->arguments['ting_object'];
  $arg['keyword'] = '%ting_object';
  $context = ctools_context_get_context_from_argument($arg, $ting_object);

  // Return page html in popup.
  $output = page_manager_page_execute($subtask_id, $context);
  $commands[] = ajax_command_ding_popup('reol_use_loan', t('Try'), $output, array('class' => array($class), 'refresh' => TRUE));

  // Return the ajax commands as an render array.
  return array('#type' => 'ajax', '#commands' => $commands);
}
