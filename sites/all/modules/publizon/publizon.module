<?php

/**
 * @file
 * Code for the Publizon provider feature.
 */

include_once 'publizon.features.inc';

require_once dirname(__FILE__) . '/includes/publizon.admin.inc';

/**
 * Implements hook_ding_provider().
 *
 * Define the providers that are provided by publizon.
 */
function publizon_ding_provider() {
  return array(
    'title' => 'Publizon provider',
    'settings' => 'publizon_settings_form',
    'provides' => array(
      'user' => array(
        'prefix' => 'user',
        'file' => 'includes/publizon.user.inc',
      ),
      'loan' => array(
        'prefix' => 'loan',
        'file' => 'includes/publizon.loan.inc',
      ),
      'reservation' => array(
        'prefix' => 'reservation',
        'file' => 'includes/publizon.reservation.inc',
      ),
      'availability' => array(
        'prefix' => 'availability',
        'file' => 'includes/publizon.availability.inc',
      ),
      'debt' => array(
        'prefix' => 'debt',
        'file' => 'includes/publizon.debt.inc',
      ),
      'bookmark' => array(
        'prefix' => 'bookmark',
        'file' => 'includes/publizon.bookmark.inc',
      ),
      'auth' => array(
        'prefix' => 'auth',
        'file' => 'includes/publizon.auth.inc',
      ),
      'user_consent' => array(
        'prefix' => 'user_consent',
        'file' => 'includes/publizon.user_consent.inc',
      ),
    ),
  );
}

/**
 * Implements hook_ding_session_cache_defaults().
 *
 * Set default ding_session_cache settings and tell ding_session_cache that this
 * module supports it.
 */
function publizon_ding_session_cache_defaults() {
  return array(
    'title' => 'Publizon (information from publizon)',
    'enabled' => TRUE,
    'expire' => 3600,
  );
}

/**
 * Implements hook_menu().
 */
function publizon_menu() {
  $items['admin/config/ding/provider/publizon/%publizon_library/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publizon_delete_library_form', 5),
    'access arguments' => array('administer ding provider'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/publizon.admin.inc',
  );

  $items['admin/config/ereolen/publizon'] = array(
    'title' => 'Publizon settings',
    'description' => 'Settings for the publizon module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publizon_admin_settings_form'),
    'access arguments' => array('administer ding provider'),
    'file' => 'includes/publizon.admin.inc',
  );

  return $items;
}

/**
 * Menu loader.
 */
function publizon_library_load($retailer_id) {
  $library = publizon_get_library($retailer_id);
  return $library ? $library : FALSE;
}

/**
 * Implements hook_theme().
 */
function publizon_theme() {
  return array(
    'publizon_settings_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_webform_select_options_info().
 *
 * Provides library list as options for webform.
 */
function publizon_webform_select_options_info() {
  $items = array();

  $items['libraries'] = array(
    'title' => t('Libraries'),
    'options callback' => 'publizon_webform_select_options_libraries',
  );

  return $items;
}

/**
 * Option list of libraries.
 */
function publizon_webform_select_options_libraries($compontent, $flat, $arguments) {
  $libraries = publizon_get_libraries();
  foreach ($libraries as $lib) {
    $options[$lib->retailer_id] = $lib->library_name;
  }

  return $options;
}

/**
 * Get publizon libraries.
 *
 * Helper function that findes all libraries stored in the Publizon
 * configuration and returns PublizonConfiguredLibrary indexed by retailer id.
 *
 * @param bool $reset
 *   If TRUE the static cache will be rebuild. Defaults to FALSE.
 *
 * @return array
 *   PublizonConfiguredLibrary indexed by retailer id.
 */
function publizon_get_libraries($reset = FALSE) {
  $libraries = drupal_static(__FUNCTION__, array());
  if (empty($libraries) || $reset) {
    $libraries = db_select('publizon_libraries', 'p')
      ->fields('p')
      ->orderBy('p.library_name')
      ->execute()
      ->fetchAllAssoc('retailer_id', 'PublizonConfiguredLibrary');

    if (empty($libraries)) {
      // We are missing some library configuration here.
      drupal_set_message(t('You need to login as administrator and configure Publizon library lists'), 'warning', FALSE);
      return array();
    }
  }

  return $libraries;
}

/**
 * Get single library.
 *
 * Helper function that loads Publizon configuration information about a given
 * library and return the information as a PublizonConfiguredLibrary.
 *
 * @param string $retailer_id
 *   Retailer id that identifies the library at Publizon.
 * @param bool $reset
 *   If TRUE the static cache will be rebuild. Defaults to FALSE.
 *
 * @return array
 *   PublizonConfiguredLibrary. Basic information about the library entered at
 *   the publizon administration interface.
 */
function publizon_get_library($retailer_id, $reset = FALSE) {
  // This could be more effective, but it'll do for the moment being.
  $libraries = publizon_get_libraries($reset);
  return isset($libraries[$retailer_id]) ? $libraries[$retailer_id] : array();
}

/**
 * Save library.
 */
function publizon_library_save(PublizonConfiguredLibrary $library) {
  db_merge('publizon_libraries')
    ->key(array('retailer_id' => $library->retailer_id))
    ->fields($library->toArray())
    ->execute();
}

/**
 * Get the client id to send to Publizon.
 *
 * @return string
 *   The client id.
 */
function publizon_get_client_id() {
  $client_id = variable_get('publizon_client_id', '');
  drupal_alter('publizon_client_id', $client_id);
  return $client_id;
}

/**
 * Get all libraries as a list usable in a select form item.
 *
 * @return array
 *   Array of libraries keyed by retailer id.
 */
function publizon_get_libraries_list() {
  return array_map(function ($elem) {
    return $elem->library_name;
  }, publizon_get_libraries());
}

/**
 * Filter list of libraries based municipalities ID's.
 *
 * @param array $municipalities
 *   Municipality ID's for to return libraries for.
 *
 * @param string $type
 *   The type of mapping to use in the filtering.
 *
 * @return array
 *   A filtered array.
 */
function publizon_filter_libraries_list(array $municipalities, string $type) {
  $filtered = array();
  $field = $type . '_id';
  $libraries = publizon_get_libraries();
  foreach ($libraries as $library) {
    if (!empty($library->$field) && in_array($library->$field, $municipalities)) {
      $filtered[$library->$field] = $library;
    }
  }

  return $filtered;
}

/**
 * Get the retailer id for a user.
 *
 * Loaded form the users profile2 profile.
 *
 * @param object $account
 *   The user object.
 * @param bool $reset
 *   By-pass/reset cache.
 *
 * @return string
 *   The retailer id.
 */
function publizon_get_retailer_id($account, $reset = FALSE) {
  $retailer_id = &drupal_static(__FUNCTION__, array());

  if (empty($retailer_id[$account->uid]) || $reset) {
    // Get the retailer id on the user.
    if (isset($_SESSION['ding_user']['user']['data']['retailer_id'])) {
      $retailer_id[$account->uid] = $_SESSION['ding_user']['user']['data']['retailer_id'];
    }
  }

  return $retailer_id[$account->uid];
}

/**
 * Get the cover URI from a local id.
 *
 * @param string $local_id
 *   The local id of the ding object.
 *
 * @return string
 *   The URI or FALSE if no cover found.
 */
function publizon_get_product_cover($local_id) {
  $isbn = reol_base_get_isbn($local_id);
  // If we do not have an ISBN, no cover can be found.
  if (!$isbn) {
    return FALSE;
  }

  // Get the cover image from Publizon.
  $client = PublizonProductClient::getClient();

  return $client->getCoverUri($isbn);
}

/**
 * Implements hook_ting_covers().
 */
function publizon_ting_covers($entities) {
  $covers = array();
  foreach ($entities as $id => $entity) {
    if (FALSE === $entity && reol_base_fake_id($id)) {
      $local_id = drupal_substr($id, strpos($id, ':') + 1);
      $local_id = REOL_BASE_LOCAL_ID_PREFIX . $local_id;
    }
    else {
      $local_id = $entity->localId;
    }
    $uri = publizon_get_product_cover($local_id);

    if (!empty($uri)) {
      $covers[$id] = $uri;
    }
  }

  return $covers;
}

/**
 * Alter reserve form.
 *
 * As we are adding field widgets we cannot use the options form
 * from provider. Instead we have to use alter.
 *
 * @param array $form
 *   The form.
 * @param array $form_state
 *   The state of the form.
 *
 * @return array
 *   Form array.
 *
 * @see publizon_reservation_options()
 */
function publizon_form_ding_reservation_reserve_form_alter(array &$form, array &$form_state) {
  if (!isset($form['#parents'])) {
    $form['#parents'] = array();
  }

  // This should be OK, as you would always reserve as the logged in user.
  global $user;
  $profile = profile2_load_by_user($user, 'provider_publizon');

  $form['publizon']['#tree'] = TRUE;

  // Add phone field.
  $form['publizon'] += reol_base_get_field_form('profile2', 'provider_publizon', 'field_phone', $profile, $form, $form_state);
  $form['publizon']['phone_notification'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send notification to my phone'),
    '#default_value' => TRUE,
    '#weight' => 0,
  );
  // Only show this field when the 'phone_notification' checkbox is enabled.
  $form['publizon']['field_phone']['#states'] = array(
    'visible' => array(
      ':input[name="publizon[phone_notification]"]' => array('checked' => TRUE),
    ),
  );
  $form['publizon']['field_phone']['#weight'] = 10;

  // Add email field.
  $form['publizon'] += reol_base_get_field_form('profile2', 'provider_publizon', 'field_email', $profile, $form, $form_state);
  $form['publizon']['email_notification'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send notification to my email'),
    '#default_value' => TRUE,
    '#weight' => 20,
  );
  // Only show this field when the 'email_notification' checkbox is enabled.
  $form['publizon']['field_email']['#states'] = array(
    'visible' => array(
      ':input[name="publizon[email_notification]"]' => array('checked' => TRUE),
    ),
  );
  $form['publizon']['field_email']['#weight'] = 30;

  $form['publizon']['#weight'] = 0;

  $form['#validate'][] = 'publizon_form_ding_reservation_reserve_form_validate';
  array_unshift($form['#submit'], 'publizon_form_ding_reservation_reserve_form_submit');
  return $form;
}

/**
 * Validate reserve form.
 *
 * As this for is not actually the profile2 form we have to manually
 * add the field validations.
 *
 * @param array $form
 *   The form to validate.
 * @param array $form_state
 *   The state of the form at submit.
 */
function publizon_form_ding_reservation_reserve_form_validate(array $form, array &$form_state) {
  $entity = (object) $form_state['values']['publizon'];
  $entity->type = 'provider_publizon';
  $options = array(
    'email_notification' => TRUE,
    'phone_notification' => TRUE,
  );

  $wrapper = entity_metadata_wrapper('profile2', $entity);

  if ($form_state['values']['publizon']['phone_notification']) {
    if (!$wrapper->field_phone->value()) {
      // The field is not required, so we check here.
      $element = $form['publizon']['field_phone'];
      form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
    }
  }
  else {
    // Do not validate phone if it is not selected.
    $wrapper->field_phone->set(NULL);
    $options['phone_notification'] = FALSE;
  }

  if ($form_state['values']['publizon']['email_notification']) {
    if (!$wrapper->field_email->value()) {
      // The field is not required, so we check here.
      $element = $form['publizon']['field_email'];
      form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
    }
  }
  else {
    // Do not validate email if it is not selected.
    $wrapper->field_email->set(NULL);
    $options['email_notification'] = FALSE;
  }

  // Set the provider options that's passed to the reserve callback.
  form_set_value($form['provider_options'], $options, $form_state);

  field_attach_form_validate('profile2', $entity, $form, $form_state);
}

/**
 * Submit reserve form.
 *
 * Save the (changed) values from form on the user.
 *
 * We cannot use options_submit here, as Ding checks the values
 * submitted from form. If the value is empty, and the default value
 * is empty, it sets and error on the form. An unchecked checkbox (FALSE)
 * will return true in empty() call, and so will the default value NULL.
 *
 * @param array $form
 *   The form to validate.
 * @param array $form_state
 *   The state of the form at submit.
 */
function publizon_form_ding_reservation_reserve_form_submit(array $form, array &$form_state) {
  global $user;
  $profile = profile2_load_by_user($user, 'provider_publizon');
  $values = $form_state['values']['publizon'];

  $changed = FALSE;
  $fields = array(
    'field_phone' => 'phone_notification',
    'field_email' => 'email_notification',
  );

  // Check if fields have changed, and change them on the profile.
  foreach ($fields as $field => $checkbox) {
    // To not confuse the user, we only save values that result in notification.
    // If they have not chosen notify for the field, do not save the value.
    if (!$values[$checkbox]) {
      continue;
    }

    if ($profile->$field != $values[$field]) {
      $profile->$field = $values[$field];
      $changed = TRUE;
    }
  }

  // Save if we have changes.
  if ($changed) {
    $profile->save();
  }
}

/**
 * Get error message array.
 *
 * @param int $code
 *   The error code to get message for.
 *
 * @return array
 *   The message definition.
 */
function publizon_get_message($code) {
  $messages = variable_get('publizon_error_messages', array());
  if (empty($messages)) {
    // Set variable $message to default messages.
    require drupal_get_path('module', 'publizon') . '/includes/publizon.default_error_messages.inc';
  }

  return $messages[$code] ?? $messages[-1];
}

/**
 * Load publizon product.
 *
 * @param string $local_id
 *   The local id of the entity to load publizon product for.
 *
 * @return PublizonProduct
 *   The product.
 */
function publizon_load($local_id) {
  $products = &drupal_static(__FUNCTION__, array()) ;
  // If product is not in cache, get it.
  if (!isset($products[$local_id])) {
    // Try getting from db cache.
    if ($cache = cache_get('publizon_products:' . $local_id)) {
      $products[$local_id] = $cache->data;
    }
    else {
      // Try to get product from Publizon.
      try {
        $client = PublizonProductClient::getClient();
        $products[$local_id] = $client->getProduct(reol_base_get_isbn($local_id));
      }
      catch (Exception $e) {
        $products[$local_id] = FALSE;
      }
      // Save in db cache.
      cache_set('publizon_products:' . $local_id, $products[$local_id], 'cache', time() + 3 * 60 * 60);
    }
  }

  return $products[$local_id];
}

/**
 * Load publizon library.
 *
 * @param string $library_id
 *   The id of the library to load info for.
 *
 * @return PublizonLibrary
 *   The library.
 */
function publizon_client_library_load($library_id) {
  $library = ding_session_cache_get('publizon', 'library');

  // If library is not in cache, get it.
  if (FALSE === $library) {
    // Try to get library from Publizon.
    try {
      $client = PublizonLibraryClient::getClient();
      $library = $client->getLibraryProfile($library_id);
    }
    catch (Exception $e) {
      $library = FALSE;
    }

    // Save in db cache.
    ding_session_cache_set('publizon', 'library', $library);
  }

  return $library;
}

/**
 * Implements hook_form_alter().
 */
function publizon_form_alter(&$form, &$form_state, $form_id) {
  // Set default value on support_id webform field.
  if (isset($form['submitted']['support_id'])) {
    global $user;
    // See publizon_user_authenticate that returns this data that is set in
    // under ding_user in the session.
    if (user_is_logged_in() && isset($_SESSION['ding_user']['user']['data'])) {
      $user_data = $_SESSION['ding_user']['user']['data'];
      if (isset($user_data['support_id'])) {
        $form['submitted']['support_id']['#default_value'] = $user_data['support_id'];
      }
    }
  }
}

/**
 * Get user data from publizon from login.
 *
 * @return mixed
 *   The user data collected.
 */
function publizon_get_user_data(): array {
  if (isset($_SESSION['ding_user'])) {
    // User has not timed out by auto logout module so return credentials.
    return $_SESSION['ding_user']['user']['data'];
  }

  // Return empty array to support already logged-in users when this code is
  // released.
  return array();
}
