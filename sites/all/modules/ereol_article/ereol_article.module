<?php

/**
 * @file
 * Code for the eReolen article feature.
 */

include_once 'ereol_article.features.inc';

/**
 * Implements hook_menu().
 */
function ereol_article_menu() {
  $items = array();

  $items['news/ajax/%/%'] = array(
    'title' => 'Get article carousel results',
    'page callback' => 'ereol_article_ajax',
    'page arguments' => array(2, 3),
    // Free access to view article carousel.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ereol_article_theme() {
  return array(
    'ereol_article_placeholder' => array(
      'template' => 'templates/ereol_article_placeholder',
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_preprocess_node().
 */
function ereol_article_preprocess_node(&$variables) {
  $node = $variables['node'];

  if ($node->type == 'article' && $variables['view_mode'] == 'full') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $params = array(
      'query' => array(
        'type' => $wrapper->field_article_type->value() ?? NULL,
        'subjects' => array_column($wrapper->field_subject->value() ?? [], 'tid'),
        'exclude' => $node->nid,
      ),
    );
    $ajax_path = url(sprintf('news/ajax/%s', 5), $params);

    $variables['other_articles'] = array(
      '#type' => 'ding_carousel',
      '#title' => t('More articles'),
      '#more_link' => l(t('All articles'), 'articles', $params),
      '#path' => $ajax_path,
      '#offset' => 0,
      '#items' => array(),
      '#placeholder' => array(
        '#theme' => 'ereol_article_placeholder',
      ),
      '#placeholders' => 5,
    );
  }
}

/**
 * AJAX callback to retrieve carousel items article carousel.
 *
 * @param int $count
 *   Number of items to fetch. Limited to 20.
 * @param int $offset
 *   Offset into result to fetch from.
 */
function ereol_article_ajax($count, $offset) {
  if ($count > 20) {
    $count = 20;
  }

  list($more, $articles) = ereol_article_get_articles((int) $count, (int) $offset);

  $return = array(
    'content' => '',
    'offset' => $more ? $count + $offset : -1,
  );

  if (!empty($articles)) {
    foreach ($articles as $article) {
      $build[] = array(
        '#type' => 'ding_carousel_item',
        '#content' => $article,
      );
    }

    $return['content'] = drupal_render($build);
  }

  // Return JSON output.
  drupal_json_output($return);
}

/**
 * Returns list of newest articles.
 *
 * @param int $count
 *   Number of articles to fetch.
 * @param int $offset
 *   Offset to start from.
 *
 * @return array
 *   A two element array, a boolean indicating whether there's more to be
 *   fetched, and a build array of articles, indexed by nid.
 */
function ereol_article_get_articles($count, $offset = 0) {
  $articles = array();
  $more = FALSE;
  $query = new EntityFieldQuery();

  $bundle = 'article';
  // Hack for eReolen Go!
  if (module_exists('breol_news')) {
    $bundle = 'breol_news';
  }

  // Fetch one more than count to check if there's more.
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->addTag('published_at')
    ->addMetaData('published_at', [
      'order_by' => [
        'direction' => 'DESC',
      ],
    ])
    ->range($offset, $count + 1);

  $params = drupal_get_query_parameters();
  if (isset($params['exclude'])) {
    $query->propertyCondition('nid', (array) $params['exclude'], 'NOT IN');
  }

  if ('article' === $bundle) {
    // Build a filtered query to see if it returns any results.
    $filteredQuery = clone $query;
    if (isset($params['type'])) {
      $filteredQuery->fieldCondition('field_article_type', 'value',
        $params['type']);
    }
    if (isset($params['subjects'])) {
      $filteredQuery->fieldCondition('field_subject', 'tid', (array) $params['subjects'], 'IN');
    }
    $result = $filteredQuery->execute();
  }

  // If filtered query returns no results, fall back to unfiltered query,
  // but only on first page of results.
  if (0 === $offset && !isset($result['node'])) {
    $result = $query->execute();
  }

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    if (count($nids) > $count) {
      $more = TRUE;
      // Remove the extra article.
      array_pop($nids);
    }
    $articles = entity_load('node', $nids);
    if ($articles) {
      $rendered_nodes = node_view_multiple($articles);
      foreach (element_children($rendered_nodes['nodes']) as $key) {
        $articles[$key] = $rendered_nodes['nodes'][$key];
      }
    }
  }

  return array($more, $articles);
}

/**
 * Implements hook_form_alter().
 */
function ereol_article_form_alter(&$form, &$form_state, $form_id) {
  if ('article_node_form' === $form_id) {
    drupal_add_css(drupal_get_path('module', 'ereol_article') . '/assets/admin.css');
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ereol_article_field_widget_form_alter(&$element, &$form_state, $context) {
  if ('field_promoted_materials' === ($element['#field_name'] ?? NULL)) {
    // Add autocomplete to field.
    $element['value']['#type'] = 'textfield';
    $element['value']['#autocomplete_path'] = 'ting_reference/autocomplete/object/js';
    $element['value']['#description'] = t('Enter a query to search for objects or collections to reference');

    // Add preview of selected material (cf. ting_reference_field_widget_form()).
    $id = $context['items'][$context['delta'] ?? -1]['value'] ?? NULL;
    $ting_entity = ting_object_load($id);
    if (!empty($ting_entity)) {
      $build = ting_object_view($ting_entity, 'ting_reference_preview');
      $build['#weight'] = 100;
      $element['preview'] = $build;
      $element['#attached']['css'] = array(
        drupal_get_path('module', 'ting_reference') . '/css/ting_reference.css',
      );
    }
  }
}
