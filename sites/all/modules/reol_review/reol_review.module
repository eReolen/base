<?php

/**
 * @file
 * Code for the eReolen review module feature.
 */

/**
 * Implements hook_cron().
 *
 * Make sure we have reviews fetched and cached.
 */
function reol_review_cron() {
  // Import files.
  $index = variable_get('reol_review_file_index', 1);
  if ($index > 0) {
    $queue = DrupalQueue::get('reol_review_load_file');
    $path = drupal_get_path('module', 'reol_review') . '/reviews';
    while (file_exists($path . '/review_' . $index . '.json')) {
      $queue->createItem($index);
      $index++;
    }
    variable_set('reol_review_file_index', -1);
  }

  // Reschedule old reviews we didn't find locally for periodic recheck.
  $days = variable_get('reol_review_reshedule_unknown_days', 7);
  $timestamp = REQUEST_TIME - ($days * 86400);

  $query = db_select('reol_review_reviews', 'r')
    ->fields('r', array('rrid'))
    ->condition('ding_entity_id', '')
    ->condition('process', 0)
    ->condition('processed', $timestamp, '<')
    ->range(0, 50);

  $rrids = array();
  $queue = DrupalQueue::get('reol_review_old');
  foreach ($query->execute() as $row) {
    $queue->createItem($row->rrid);
    $rrids[] = $row->rrid;
  }

  // Set to being processed.
  if ($rrids) {
    db_update('reol_review_reviews')
      ->fields(array('process' => 1))
      ->condition('rrid', $rrids)
      ->execute();
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function reol_review_cron_queue_info() {
  // We're running with two processing queues, to ensure that new entries are
  // always processed, even when there's old in the queue.
  $queues['reol_review_new'] = array(
    'worker callback' => 'reol_review_process_queue',
    'time' => 120,
  );

  $queues['reol_review_old'] = array(
    'worker callback' => 'reol_review_process_queue',
    'time' => 120,
  );

  $queues['reol_review_load_file'] = array(
    'worker callback' => 'reol_review_load_file',
    'time' => 120,
  );

  return $queues;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function reol_review_ctools_plugin_directory($owner, $plugin_type) {
  return 'plugins/' . $plugin_type;
}

/**
 * Ctools block theme function.
 */
function reol_review_theme(&$theme, $plugin) {
  return array(
    'single_review' => array(
      'variables' => array('vars' => NULL),
      'template' => 'templates/single_review',
    ),
  );
}

/**
 * Get a random review.
 *
 * @param string $type
 *   The type to get a random review for. If not set, return one
 *   random result in all types.
 *
 * @return StdClass
 *   The review randomly chosen. The related ting_entity will be available on
 *   $review->ting_entity.
 */
function reol_review_get_random_reviews($type = NULL, $count = 1) {
  $query = db_select('reol_review_reviews', 'r')
    ->fields('r')
    // Get only reviews that actually exist (when last checked).
    ->condition('http_code', '200')
    ->condition('processed', 0, '<>')
    ->condition('ding_entity_id', '', '<>')
    ->orderRandom();

  if ($type) {
    $query->condition('type', $type);
  }

  $res = $query->execute();

  $result = array();
  while ($review = $res->fetch()) {
    $review->ting_entity = ding_entity_load($review->ding_entity_id);
    if ($review->ting_entity) {
      $result[] = $review;
    }
    else {
      // If we can't find the object anymore, remove the review from
      // selection. We're not resetting processed just letting it be reprocessed
      // as already scheduled.
      db_update('reol_review_reviews')
        ->fields(array(
          'process' => $review->process,
          'processed' => $review->processed,
          'type' => $review->type,
          'ding_entity_id' => '',
        ))
        ->condition('rrid', $review->rrid)
        ->execute();
    }
    if (count($result) >= $count) {
      break;
    }
  }

  return $result;
}

/**
 * Cron queue callback.
 *
 * Import a file and queue reviews for processing.
 */
function reol_review_load_file($index) {
  $queue = DrupalQueue::get('reol_review_new');
  $file = drupal_get_path('module', 'reol_review') . '/reviews/review_' . $index . '.json';
  $data = json_decode(file_get_contents($file));
  if (!is_array($data)) {
    return;
  }

  foreach ($data as $review) {
    // Skip invalid reviews.
    if (!is_object($review) ||
      empty($review->isbn) ||
      empty($review->url) ||
      empty($review->created_at) ||
      empty($review->description) ||
      empty($review->book_author) ||
      empty($review->book_title)) {
      continue;
    }
    $isbn = trim($review->isbn);
    $link = trim($review->url);

    // Skip if they're too long. Not using drupal_strlen() as we want
    // the ASCII length, not multibyte length.
    if (strlen($isbn) > 13 || strlen($link) > 255) {
      continue;
    }

    try {
      $id = db_insert('reol_review_reviews')
        ->fields(
          array(
            'isbn' => $isbn,
            'link' => $link,
            'process' => 1,
            // Should be an ISO8601 date.
            'created' => strtotime($review->created_at),
            'description' => $review->description,
            'title' => trim($review->book_title),
            'author' => trim($review->book_author),
          )
        )
        ->execute();

      $queue->createItem($id);
    }
    catch (Exception $e) {
      // Ignore errors, most likely duplicate keys.
    }
  }
}

/**
 * Cron queue callback.
 *
 * Processes one item.
 */
function reol_review_process_queue($rrid) {
  $review = db_select('reol_review_reviews', 'r')
    ->fields('r')
    ->condition('rrid', $rrid)
    ->execute()
    ->fetch();

  if (!$review) {
    watchdog('reol_review', 'Could not load queued review rrid @rrid', array('@rrid' => $rrid), WATCHDOG_ERROR);
    return;
  }

  // Sanitize ISBN.
  $isbn = reol_base_convert_to_isbn($review->isbn);

  if ($isbn) {
    // Search on author/title, one at a time, so we can properly map them.
    module_load_include('client.inc', 'ting');
    $ting_result = ting_do_search(sprintf('phrase.title="%s" and phrase.creator="%s"', $review->title, $review->author));
    if ($ting_result && ($ting_result->numTotalObjects > 0)) {
      // Use the first one. We're counting on multiple hits just being the
      // different ebook/audiobooks of the same work.
      list($ding_entity_id) = array_keys($ting_result->collections);
      $ting_entity = ding_entity_load($ding_entity_id);

      // Make sure the title does exist in publizon
      // and that the title has a cover.
      $product = publizon_get_product_cover($ting_entity->localId);

      // If it does, we add the info to our table.
      if ($product) {
        $type = reol_base_get_type_name($ting_entity->type);

        if ($type) {
          $review->type = $type;
          $review->ding_entity_id = $ding_entity_id;
        }
      }
    }
  }

  $review->process = 0;
  $review->processed = REQUEST_TIME;
  db_update('reol_review_reviews')
    ->fields(array(
      'process' => $review->process,
      'processed' => $review->processed,
      'type' => $review->type,
      'ding_entity_id' => $review->ding_entity_id,
    ))
    ->condition('rrid', $review->rrid)
    ->execute();
}

/**
 * Check status of reviews.
 *
 * @param int $count
 *   Number of reviews to process.
 * @param string|null $updated_before
 *   Process reviews last updated before this time.
 */
function reol_review_check($count = 100, $updated_before = NULL) {
  $condition = db_or();
  $condition->isNull('http_code');
  if (NULL !== $updated_before) {
    $time = strtotime($updated_before);
    if (FALSE !== $time) {
      $condition->condition('http_code_updated', $time, '<');
    }
  }

  $query = db_select('reol_review_reviews', 'r')
    ->fields('r', array('rrid', 'link'))
    ->condition($condition)
    ->range(0, $count);
  $rows = $query->execute()->fetchAll();

  $count = 0;
  foreach ($rows as $row) {
    $count++;

    $url = $row->link;
    $result = drupal_http_request($url, ['method' => 'HEAD']);
    $code = $result->code;

    echo sprintf('%04d/%04d % 8s %s %s', $count, count($rows), '#' . $row->rrid, $code, $url), PHP_EOL;

    db_update('reol_review_reviews')
      ->fields([
        'http_code' => $code,
        'http_code_updated' => REQUEST_TIME,
      ])
      ->condition('link', $row->link)
      ->execute();
  }
}
