<?php

/**
 * @file
 * Provides a field for making carousels.
 */

/**
 * Implements hook_menu().
 */
function reol_field_carousel_menu() {
  $items = array();

  $items['reol_field_carousel/ajax/%/%/%/%/%/%'] = array(
    'title' => 'Show search carousel results',
    'page callback' => 'reol_field_carousel_ajax',
    'page arguments' => array(2, 3, 4, 5, 6, 7),
    'access callback' => 'reol_field_carousel_ajax_access',
    'access arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_field_info().
 */
function reol_field_carousel_field_info() {
  return array(
    'reol_field_carousel' => array(
      'label' => t('Ting material search carousel'),
      'description' => t('This field stores ting search carousels'),
      'default_widget' => 'reol_field_carousel_widget',
      'default_formatter' => 'reol_field_carousel_notabs',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function reol_field_carousel_field_is_empty($item, $field) {
  if (!isset($item['title']) || $item['title'] === '') {
    return !isset($item['search']) || $item['search'] === '';
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function reol_field_carousel_field_formatter_info() {
  return array(
    // TODO: reol_field_carousel_default, which renders each item as a tab in
    // the same carousel.
    'reol_field_carousel_notabs' => array(
      'label' => t('Multiple carousels'),
      'description' => t('Displays the search strings as multiple carousels.'),
      'field types' => array('reol_field_carousel'),
      'settings' => array('render_method' => 'cover', 'search_link' => FALSE),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function reol_field_carousel_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'reol_field_carousel_notabs') {
    $element['render_method'] = array(
      '#title' => t('Cover rendering method'),
      '#type' => 'radios',
      '#options' => array(
        'cover' => t('Cover (like ting_search_carousel)'),
        'material' => t('Material (like ding_seredipity)'),
      ),
      '#default_value' => !empty($settings['render_method']) ? $settings['render_method'] : 'cover',
      '#description' => t('How to render covers.'),
      '#required' => TRUE,
    );

    $element['search_link'] = array(
      '#title' => t('Add link to search'),
      '#type' => 'checkbox',
      '#default_value' => isset($settings['search_link']) ? $settings['search_link'] : FALSE,
      '#description' => t('Whether to add a link to the search to the header.'),
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function reol_field_carousel_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if (($display['type'] == 'reol_field_carousel_notabs')) {
    $options = array(
      'cover' => t('Cover (like ting_search_carousel)'),
      'material' => t('Material (like ding_seredipity)'),
    );
    $render_method = !empty($settings['render_method']) ? $settings['render_method'] : 'cover';

    $summary = t('Render method: @render_method', array('@render_method' => $options[$render_method]));
    $summary .= "<br>";
    $summary .= t('Link to search: @searh_link', array('@searh_link' => $settings['search_link'] ? t('yes') : t('no')));
  }

  return $summary;

}

/**
 * Implements hook_field_formatter_view().
 */
function reol_field_carousel_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  list($entity_id,) = entity_extract_ids($entity_type, $entity);
  $render_method = !empty($display['settings']['render_method']) ? $display['settings']['render_method'] : 'cover';
  $search_link = !empty($display['settings']['search_link']) ? $display['settings']['search_link'] : FALSE;

  switch ($display['type']) {
    case 'reol_field_carousel_notabs':
      foreach ($items as $delta => $item) {
        $chunk = ting_search_carousel_get_entities($item['search'], 0, TING_SEARCH_CAROUSEL_CHUNK_SIZE, TRUE);
        $ajax_path = sprintf(
          'reol_field_carousel/ajax/%s/%s/%s/%s/%s',
          $entity_type,
          $entity_id,
          $field['field_name'],
          $delta,
          $render_method
        );

        $covers = reol_field_carousel_build_covers($render_method, $chunk['entities']);

        $carousel = array(
          '#type' => 'ding_carousel',
          '#title' => $item['title'],
          '#path' => $ajax_path,
          '#items' => $covers,
          '#offset' => $chunk['next_offset'],
          // Add a placeholder if there's more.
          // TODO: should be field configurable.
          '#placeholders' => $chunk['next_offset'] > -1 ? TING_SEARCH_CAROUSEL_CHUNK_SIZE + 1 : TING_SEARCH_CAROUSEL_CHUNK_SIZE,
          '#placeholder' => TRUE
        );

        if ($search_link) {
          $carousel['#more_link'] = l(t('See all'), 'search/ting/' . $item['search']);
        }

        $element[] = $carousel;
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function reol_field_carousel_field_widget_info() {
  return array(
    'reol_field_carousel_widget' => array(
      'label' => t('Carousel widget'),
      'field types' => array('reol_field_carousel'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function reol_field_carousel_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($items[$delta]['title']) ? $items[$delta]['title'] : NULL,
    // As defined in the schema.
    '#maxlength' => 255,
  );

  $element['search'] = array(
    '#type' => 'textarea',
    '#title' => t('Search string'),
    '#default_value' => isset($items[$delta]['search']) ? $items[$delta]['search'] : NULL,
    '#cols' => 60,
    '#rows' => 5,
  );

  return $element;
}

/**
 * Build render of covers according to field settings.
 */
function reol_field_carousel_build_covers($render_method, $collections) {
  $build = array();
  switch ($render_method) {
    case 'cover':
      foreach ($collections as $collection) {
        $build[] = array(
          '#type' => 'ting_search_carousel_cover',
          '#cover' => $collection,
        );
      }
      break;

    case 'material':
      $ding_entity_ids = array_map(function ($object) {
        return $object->id;
      }, $collections);

      $entities = ding_entity_load_multiple($ding_entity_ids);
      foreach ($entities as $entity) {
        $build[] = ting_object_view($entity, 'compact');
      }
      break;
  }

  return $build;
}

/**
 * Accecss callback for the ajax page.
 *
 * @param string $entity_type
 *   The entity type the field is attached to.
 * @param string $entity_id
 *   The id of the entity the field is attached to.
 * @param string $field_name
 *   Name of the field.
 */
function reol_field_carousel_ajax_access($entity_type, $entity_id, $field_name) {
  // The ajax page will do an entity_load too, so this isn't as expensive as
  // entity_load caches.
  if ($field = field_info_field($field_name) &&
      $entity = entity_load($entity_type, array($entity_id))) {
    $entity = reset($entity);
    return field_access('view', $field, $entity_type, $entity);
  }
}

/**
 * AJAX callback to retrieve carousel items for a given field.
 *
 * @param string $entity_type
 *   The entity type the field is attached to.
 * @param string $entity_id
 *   The id of the entity the field is attached to.
 * @param string $field_name
 *   Name of the field.
 * @param string $delta
 *   Field delta.
 * @param string $render_method
 *   Cover rendering method.
 * @param int $offset
 *   Offset into result to fetch from.
 */
function reol_field_carousel_ajax($entity_type, $entity_id, $field_name, $delta, $render_method, $offset) {
  // The access callback has already checked that these exists.
  $entity = entity_load($entity_type, array($entity_id));
  $entity = reset($entity);

  $items = field_get_items($entity_type, $entity, $field_name);

  $return = array(
    'content' => '',
    'offset' => -1,
  );

  if (isset($items[$delta])) {
    $item = $items[$delta];
    $chunk = ting_search_carousel_get_entities($item['search'], $offset, TING_SEARCH_CAROUSEL_CHUNK_SIZE);
    $covers = reol_field_carousel_build_covers($render_method, $chunk['collections']);
    foreach ($covers as $cover) {
      $build[] = array(
        '#type' => 'ding_carousel_item',
        '#content' => $cover,
      );
    }

    // If there's more covers, add a placeholder at the end to signal the user
    // that it's loading.
    if ($chunk['next_offset'] > -1) {
      $build[] = array(
        '#type' => 'ding_carousel_item',
        '#placeholder' => TRUE,
      );
    }

    $return = array(
      'content' => drupal_render($build),
      'offset' => $chunk['next_offset'],
    );
  }

  // Return JSON output.
  drupal_json_output($return);
}
