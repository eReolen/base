<?php

/**
 * @file
 * Installation of reol_base module.
 */

/**
 * Implements hook_install().
 */
function reol_base_install() {
  if (module_exists('ding_library')) {
    // Run the update hooks from before the module was enabled on "prod".
    reol_base_update_7101();
    reol_base_update_7102();
    reol_base_update_7103();
    reol_base_update_7104();
    reol_base_update_7105();
    reol_base_update_7106();
    reol_base_update_7107();
    reol_base_update_7108();
    reol_base_update_7109();
    reol_base_update_7110();
    reol_base_update_7111();
    reol_base_update_7112();
    reol_base_update_7113();
    reol_base_update_7114();
    reol_base_update_7115();
    reol_base_update_7116();
    reol_base_update_7118();
    reol_base_update_7119();
    reol_base_update_7120();
    reol_base_update_7121();
    reol_base_update_7122();
    reol_base_update_7123();
    reol_base_update_7124();
  }
}

/**
 * Delete {system} records for a module.
 *
 * This function is to be used when removing a module from the code-base. It's
 * needed because uninstalling a module that don't exists in code is not
 * possible.
 *
 * Remember to run the clean-up that the module had in it's hook_uninstall
 * before calling this function.
 *
 * @see https://www.drupal.org/node/2487215
 */
function reol_base_remove_module($module) {
  db_delete('system')
    ->condition('name', $module)
    ->condition('type', 'module')
    ->execute();
}

/**
 * Disable unused modules.
 */
function reol_base_update_7101() {
  $modules = array(
    'ding_bookmark',
    'ding_groups',
    'ding_news',
    'ding_tabroll',
    'ding_library',
    'ding_staff',
    'ding_event',
  );

  module_disable($modules, TRUE);
  drupal_uninstall_modules($modules, TRUE);
}

/**
 * Enable modules and theme.
 */
function reol_base_update_7102() {
  module_enable(array('reol_frontend', 'publizon', 'reol_loan'), TRUE);
  theme_enable(array('brin'));
  variable_set('theme_default', 'brin');
}

/**
 * Enable date format.
 */
function reol_base_update_7103() {
  $formats = system_get_date_formats();
  variable_set('date_format_reol_base_material_lists_date', array_shift(array_keys($formats['reol_base_material_lists_date'])));
}

/**
 * Enable reol_review module.
 */
function reol_base_update_7104() {
  module_enable(array('reol_review'), TRUE);
}

/**
 * Enable reol_reservation module.
 */
function reol_base_update_7105() {
  module_enable(array('reol_reservation'), TRUE);
}

/**
 * Enable reol_use_loan module.
 */
function reol_base_update_7106() {
  module_enable(array('reol_use_loan'), TRUE);
}

/**
 * Enable reol_category module.
 */
function reol_base_update_7107() {
  module_enable(array('reol_category'), TRUE);
}

/**
 * Enable reol_feed module.
 */
function reol_base_update_7108() {
  module_enable(array('reol_feed'), TRUE);
}

/**
 * Enable reol_bookmark module.
 */
function reol_base_update_7109() {
  module_enable(array('reol_bookmark'), TRUE);
}

/**
 * Remove node types from disabled features.
 */
function reol_base_update_7110() {
  _reol_base_remove_node_type('ding_event');
  _reol_base_remove_node_type('ding_library');
  _reol_base_remove_node_type('ding_news');
  _reol_base_remove_node_type('ding_rolltab');
}

/**
 * Enable reol_help module.
 */
function reol_base_update_7111() {
  module_enable(array('reol_help'), TRUE);
}

/**
 * Enable webform module.
 */
function reol_base_update_7112() {
  module_enable(array('webform'), TRUE);
}

/**
 * Disable autologout for all roles.
 */
function reol_base_update_7113() {
  $roles = user_roles();

  foreach ($roles as $rid => $role) {
    $role = user_role_load($rid);
    reol_base_user_role_insert($role);
  }
}

/**
 * Enable reol_announcement module.
 */
function reol_base_update_7114() {
  module_enable(array('reol_announcement'), TRUE);
}

/**
 * Enable webtrends module.
 */
function reol_base_update_7115() {
  module_enable(array('ding_webtrends'), TRUE);
}

/**
 * Enable Google analytics module.
 */
function reol_base_update_7116() {
  module_enable(array('googleanalytics'), TRUE);
}

/**
 * Field definitions.
 *
 * Implements hook_ding_entity_fields().
 */
function reol_base_ding_entity_fields() {
  return array(
    'ting_details_ebook_format' => array(
      'field' => array(
        'locked' => FALSE,
        'storage' => array(
          'type' => 'virtual_field',
        ),
      ),
      'instance' => array(
        'label' => t('E-book format'),
      ),
    ),
    'ting_details_audiobook_reader' => array(
      'field' => array(
        'locked' => FALSE,
        'storage' => array(
          'type' => 'virtual_field',
        ),
      ),
      'instance' => array(
        'label' => t('Reader'),
      ),
    ),
    'ting_details_publizon_genre' => array(
      'field' => array(
        'locked' => FALSE,
        'storage' => array(
          'type' => 'virtual_field',
        ),
      ),
      'instance' => array(
        'label' => t('Genre'),
      ),
    ),
  );
}

/**
 * Register ding entity fields.
 */
function reol_base_update_7117() {
  ding_entity_modules_enabled(array('reol_base'));
}

/**
 * Enable reol_latest module.
 */
function reol_base_update_7118() {
  module_enable(array('reol_latest'), TRUE);
}

/**
 * Enable reol_bookmark_migration module.
 */
function reol_base_update_7119() {
  module_enable(array('reol_bookmark_migration'), TRUE);
}

/**
 * Disable built-in cron.
 */
function reol_base_update_7120() {
  variable_set('cron_safe_threshold', 0);
}

/**
 * Enable shortcut per role module.
 */
function reol_base_update_7121() {
  module_enable(array('shortcutperrole'), TRUE);
}

/**
 * Create shortcuts for staff.
 */
function reol_base_update_7122() {
  $shortcut_set = new stdClass();
  $shortcut_set->title = 'Staff';
  $shortcut_set->set_name = 'staff';
  $shortcut_set->links = array(
    array(
      'link_path' => 'node/add',
      'link_title' => 'Add content',
      'weight' => 0,
    ),
    array(
      'link_path' => 'admin/content',
      'link_title' => 'Content',
      'weight' => 1,
    ),
    array(
      'link_path' => 'admin/config/regional/translate',
      'link_title' => 'Manage translations',
      'weight' => 2,
    ),
    array(
      'link_path' => 'admin/structure/reol_announcement',
      'link_title' => 'Site announcement',
      'weight' => 3,
    ),
    array(
      'link_path' => 'admin/config/ting/ting_search_carousel',
      'link_title' => 'Frontpage carousel',
      'weight' => 4,
    ),
    array(
      'link_path' => 'admin/reports/bookmark_migration',
      'link_title' => 'Bookmark migration status',
      'weight' => 5,
    ),
  );

  shortcut_set_save($shortcut_set);

  // Set shortcutperrole to choose staff set for role staff (rid = 9).
  variable_set('shortcutperrole', array(
    9 => 'staff',
  ));
}

/**
 * Enable ding_varnish module.
 */
function reol_base_update_7123() {
  module_enable(array('ding_varnish'), TRUE);
}

/**
 * Enable redirect and globalredirect modules.
 */
function reol_base_update_7124() {
  module_enable(array('redirect', 'globalredirect'), TRUE);
}

/**
 * Enable advagg module.
 */
function reol_base_update_7125() {
  module_enable(array('advagg'), TRUE);
}

/**
 * Enable reol_search module.
 */
function reol_base_update_7126() {
  module_enable(['reol_search'], TRUE);
}

/**
 * Enable mailchimp modules.
 */
function reol_base_update_7127() {
  module_enable(['mailchimp', 'mailchimp_signup', 'mailchimp_lists'], TRUE);
}

/**
 * Enable reol_newsletter module.
 */
function reol_base_update_7128() {
  module_enable(['reol_newsletter'], TRUE);
}

/**
 * Enable reol_shared_theme module.
 */
function reol_base_update_7129() {
  module_enable(['reol_shared_theme'], TRUE);
}

/**
 * Enable google_tag module.
 */
function reol_base_update_7130() {
  module_enable(['google_tag'], TRUE);
}

/**
 * Enable system_status.
 */
function reol_base_update_7131() {
  module_enable(['system_status']);
}

/**
 * Revert ding_ting_frontend.
 */
function reol_base_update_7132() {
  features_revert_module('ding_ting_frontend');
}

/**
 * Enable ereol_base on eReolen.
 */
function reol_base_update_7133() {
  // Only enable ereol_base if breol_base is not enabled.
  if (!module_exists('breol_base')) {
    module_enable(['ereol_base'], TRUE);
  }
}

/**
 * Enable xautoload for bpi.
 */
function reol_base_update_7134() {
  module_enable(['xautoload']);
}

/**
 * Revert wysiwyg profile.
 */
function reol_base_update_7135() {
  features_revert(array('ding_content' => array('wysiwyg')));
}

/**
 * Revert groups and fields instances of ding_ting_frontend.
 */
function reol_base_update_7136() {
  features_revert(array('ding_ting_frontend' => array('field_group', 'field_instance')));
}

/**
 * Revert groups and fields instances of ting_material_details.
 */
function reol_base_update_7137() {
  features_revert(array('ting_material_details' => array('field_group', 'field_instance')));
}

/**
 * Revert groups and fields instances of ding_entity_rating.
 */
function reol_base_update_7138() {
  features_revert(array('ding_entity_rating' => array('field_group', 'field_instance')));
}

/**
 * Revert reol_base.
 */
function reol_base_update_7139() {
  features_revert_module('reol_base');
}

/**
 * Revert groups and fields instances of ting_material_details.
 */
function reol_base_update_7140() {
  features_revert(array('ting_material_details' => array('field_group', 'field_instance')));
}

/**
 * Revert field bases and instances of ting_material_details.
 */
function reol_base_update_7141() {
  features_revert(array('ting_material_details' => array('field_base', 'field_instance')));
}

/**
 * Revert fields to display Lix.
 */
function reol_base_update_7142() {
  features_revert(
    array(
      'reol_base' => array('field_base', 'field_instance'),
      'ting_material_details' => array('field_group'),
    ));
}

/**
 * Disable old shared modules.
 */
function reol_base_update_7143() {
  $modules = array(
    'reol_shared_frontend',
    'reol_shared_theme',
  );

  module_disable($modules, TRUE);
  drupal_uninstall_modules($modules, TRUE);
}

/**
 * Disable ding_webtrends.
 */
function reol_base_update_7144() {
  $modules = array('ding_webtrends');
  module_disable($modules, TRUE);
  drupal_uninstall_modules($modules, TRUE);
}

/**
 * Uninstall google modules.
 */
function reol_base_update_7145() {
  $modules = array('goggle_analytics', 'google_tag');
  module_disable($modules, TRUE);
  drupal_uninstall_modules($modules, TRUE);
}

/**
 * Remove traces of cookiecontrol module.
 */
function reol_base_update_7146() {
  // Ding replaced cookiecontrol module, but didn't remove it from the system
  // table.
  db_delete('system')
    ->condition('name', 'cookiecontrol')
    ->execute();
}

/**
 * Uninstall google_analytics for real.
 */
function reol_base_update_7147() {
  $modules = array('google_analytics');
  module_disable($modules, TRUE);
  drupal_uninstall_modules($modules, TRUE);
}

/**
 * Remove traces of google modules.
 */
function reol_base_update_7148() {
  // The google_analytics module isn't completely removed, there's another
  // version in ding, but deleting it here and letting Drupal rediscover the
  // other version suppresses a warning about it being moved.
  db_delete('system')
    ->condition('name', array('google_analytics', 'google_tag'))
    ->execute();
}

/**
 * Revert ding_ting_frontend.
 */
function reol_base_update_7149() {
  features_revert_module('ding_ting_frontend');
}

/**
 * Disable autologout module.
 */
function reol_base_update_7150() {
  // It don't makes sens to auto logout users will listening or reading an online book.
  if (module_exists('autologout')) {
    module_disable(array('autologout'), FALSE);
  }
}

/**
 * Clean up: admin menu module.
 */
function reol_base_update_7151() {
  reol_base_remove_module('admin_menu');
  reol_base_remove_module('admin_menu_toolbar');

  // Delete variables.
  variable_del('admin_menu_components');
  variable_del('admin_menu_margin_top');
  variable_del('admin_menu_position_fixed');
  variable_del('admin_menu_tweak_modules');
  variable_del('admin_menu_tweak_tabs');
  variable_del('admin_menu_show_all');
  variable_del('admin_menu_display');
  variable_del('admin_menu_cache_server');
  variable_del('admin_menu_cache_client');
  // Unused variables still should be deleted.
  variable_del('admin_menu_devel_modules');
  variable_del('admin_menu_devel_modules_enabled');
  variable_del('admin_menu_devel_modules_skip');
}

/**
 * Clean up: ding campaign.
 */
function reol_base_update_7152() {
  reol_base_remove_module('ding_campaign');

  variable_del('ding_campaign_node_types');

  db_drop_table('ding_campaign');
  db_drop_table('ding_campaign_rules');

  // First, delete nodes
  $type =  'ding_campaign';
  $results = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', $type)
    ->execute();

  $nids = array();
  foreach ($results as $result) {
    $nids[] = $result->nid;
  }
  if (!empty($nids)) {
    node_delete_multiple($nids);
  }
  // Then, delete content type
  if (node_type_load($type)) {
    node_type_delete($type);
    variable_del('node_preview_' . $type);
  }

  node_types_rebuild();
  menu_rebuild();
}

/**
 * Clean up: ding ekurser.
 */
function reol_base_update_7153() {
  reol_base_remove_module('ding_ekurser');

  // Clear cache.
  cache_clear_all('ding_ekurser_subject_facets', 'cache');

  // Disable ding_ekurser search module.
  $search_modules = variable_get('search_active_modules');
  if (isset($search_modules['ding_ekurser'])) {
    unset($search_modules['ding_ekurser']);
    variable_set('search_active_modules', $search_modules);
  }
}

/**
 * Clean up: geo data.
 */
function reol_base_update_7154() {
  reol_base_remove_module('geofield');
  reol_base_remove_module('geocoder');
  reol_base_remove_module('geophp');
  reol_base_remove_module('leaflet');
  reol_base_remove_module('leaflet_views');
  reol_base_remove_module('proj4js');
}

/**
 * Clean up: Opening hours
 */
function reol_base_update_7155() {
  reol_base_remove_module('opening_hours');

  variable_del('admin_theme_opening_hours_opening_hours');
  db_query("DELETE FROM {variable} WHERE name LIKE 'opening_hours_%'");

  db_drop_table('opening_hours');
}

/**
 * Clean up: ECK
 */
function reol_base_update_7156() {
  reol_base_remove_module('eck');

  db_drop_table('cache_eck');
  db_drop_table('eck_entity_type');
  db_drop_table('eck_bundle');

  variable_del('eck_clear_caches');
}

/**
 * Clean up: modules
 */
function reol_base_update_7157() {
  reol_base_remove_module('autologout');
  reol_base_remove_module('reol_shared_frontend');
  reol_base_remove_module('ting_proxy');
  reol_base_remove_module('addressfield');
  reol_base_remove_module('tipsy');
  variable_del('tipsy');
}

/**
 * Clean up: P2 - open list.
 */
function reol_base_update_7158() {
  reol_base_remove_module('ding_interaction');
  reol_base_remove_module('ding_interaction_manual');

  reol_base_remove_module('ding_list_installer');
  reol_base_remove_module('ding_list');
  db_drop_field('users', 'openlist_modified');

  reol_base_remove_module('ding_messagding_entity_rating_loan_historye');
  db_drop_table('ding_message_check');

  reol_base_remove_module('ding_notifications');
  reol_base_remove_module('ding_serendipity');
  variable_del('ding_serendipity_enable_cache');
  variable_del('ding_serendipity_cache_lifetime');
  variable_del('ding_serendipity_callbacks');
  variable_del('ding_serendipity_isslow_timeout');
  variable_del('ding_serendipity_search_string_final');
  variable_del('ding_serendipity_weights');
  variable_del('ding_frontpage_serendipity');

  reol_base_remove_module('ding_serendipity_fallback');
  reol_base_remove_module('ding_serendipity_lists');
  reol_base_remove_module('ding_serendipity_site');
  reol_base_remove_module('ding_serendipity_taxonomy_term');
  reol_base_remove_module('ding_serendipity_ting_entity');
  reol_base_remove_module('ding_sharer');
  reol_base_remove_module('ding_user_consent');
  variable_del('ding_user_consent_loan_history_store_description_link');

  reol_base_remove_module('ding_p2_installer');
  reol_base_remove_module('ting_openlist');
  variable_del('ting_openlist_developer');
  variable_del('ting_openlist_log');
  variable_del('ting_openlist_wsdl');
  variable_del('ting_library_code');
  variable_del('ting_openlist_prefix');
  variable_del('ting_openlist_wsdl_cache');
  variable_del('ting_openlist_log_details');
  variable_del('ting_openlist_developer');
  db_drop_field('users', 'openlist_uid');

  reol_base_remove_module('ding_message');
  reol_base_remove_module('message');
  variable_del('message_delete_cron_limit');
  variable_del('message_purge_enable');
  variable_del('message_purge_quota');
  variable_del('message_purge_days');
  variable_del('message_delete_on_entity_delete');

  $value = variable_get('features_codecache');
  unset($value['ding_message']);
  variable_set('features_codecache', $value);

  reol_base_remove_module('simplevar');
  db_drop_table('simplevar');

  reol_base_remove_module('ding_message_p2_installer');
  reol_base_remove_module('ding_entity_rating_loan_history');

  reol_base_remove_module('ding_entity_rating');
  variable_del('ding_entity_rating_popular_on_frontpage');
}

/**
 * Clean up: Dynamic background.
 */
function reol_base_update_7159() {
  reol_base_remove_module('dynamic_background');

  db_drop_table('dynamic_background_usage');
  db_drop_table('dynamic_background_images');

  variable_del('dynamic_background_setting');
  variable_del('dynamic_background_images');
  variable_del('dynamic_background_image_style');
  variable_del('dynamic_background_weight');
}

/**
 * Clean up: Remove used fields.
 */
function reol_base_update_7160() {
  // Apparently, we cannot use field_delete_field because the ding_entity
  // module does not exist.
  db_delete('field_config_instance')
    ->condition('field_name', 'ding_entity_rating_action')
    ->execute();
  db_delete('field_config_instance')
    ->condition('field_name', 'ding_entity_rating_result')
    ->execute();
  db_delete('field_config')
    ->condition('module', 'ding_entity_rating')
    ->execute();
}

/**
 * Clean up: Remove references to ding_entity_rating module.
 */
function reol_base_update_7161() {
  $value = variable_get('ding_interaction_callbacks');
  unset($value['ding_entity_rating']);
  unset($value['ding_entity_rating_loan_history']);
  variable_set('ding_interaction_callbacks', $value);

  $value = variable_get('features_codecache');
  unset($value['ding_entity_rating']);
  variable_set('features_codecache', $value);
}

/**
 * Clean up: Remove orphaned actions.
 */
function reol_base_update_7162() {
  // https://www.drupal.org/forum/support/post-installation/2011-12-19/how-can-i-remove-orphaned-actions-in-drupal-7
  actions_synchronize(actions_list(), TRUE);
}

/**
 * Change media rendering method.
 */
function reol_base_update_7163() {
  variable_set('media_wysiwyg_default_render', 'field_attach');
}

/**
 * Enable image-magick support
 */
function reol_base_update_7164() {
  module_enable(array('imagemagick'));
  variable_set('image_toolkit', 'imagemagick');
}

/**
 * Enable lazy image loading.
 */
function reol_base_update_7165() {
  module_enable(array('reol_lazy_load_images'));
}

/**
 * Remove advagg module.
 */
function reol_base_update_7166() {
  ding2_remove_module('advagg');
}

/**
 * Set imagemagick configuration.
 */
function reol_base_update_7167() {
  variable_set('imagemagick_convert', 'convert');
  variable_set('imagemagick_debug', 0);
  variable_set('imagemagick_gm', 0);
  variable_set('imagemagick_quality', '75');
}

/**
 * Enable ding_libs module
 */
function reol_base_update_7168() {
  module_enable(array('ding_libs'));
}

/**
 * Enable reol_app_feeds module.
 */
function reol_base_update_7169() {
  module_enable(array('reol_app_feeds'));
}

/**
 * Update module weight to ensure alter runs last.
 */
function reol_base_update_7170() {
  db_update('system')
    ->fields(array('weight' => 10))
    ->condition('name', 'reol_base', '=')
    ->execute();
}
