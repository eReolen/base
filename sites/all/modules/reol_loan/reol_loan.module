<?php

/**
 * @file
 * Code for the eReolen loan module feature.
 */

require_once 'includes/reol_loan.loan.inc';

define('REOL_LOAN_STATUS_NOT_LOANABLE', -1);
define('REOL_LOAN_STATUS_LOANED', 1);
define('REOL_LOAN_STATUS_RESERVED', 2);
define('REOL_LOAN_STATUS_LOANABLE', 4);
define('REOL_LOAN_STATUS_RESERVABLE', 5);

/**
 * Implements hook_permission().
 */
function reol_loan_permission() {
  return array(
    'perform loan' => array(
      'title' => t('Perform loan'),
      'description' => t('Perform a loan of an audiobook or ebook'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function reol_loan_menu() {
  $items = array();

  $items['ting/object/%ting_object/loan'] = array(
    'page callback' => 'reol_base_entity_ajax_form',
    'page arguments' => array('reol_loan', 'reol_loan_loan_ajax', 2),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('perform loan'),
  );

  $items['user/%user/status/reservations/delete/%/ajax'] = array(
    'title' => 'Delete reservations',
    'page callback' => 'reol_loan_delete_reservations_ajax',
    'page arguments' => array(1, 5),
    'access callback' => 'ding_reservation_access',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Implements hook_secure_permissions().
 *
 * Define which users should be able to perform a loan.
 */
function reol_loan_secure_permissions($role) {
  $permissions = array(
    'anonymous user' => array(
      'perform loan',
    ),
    'provider' => array(
      'perform loan',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reol_loan_form_ding_loan_loans_form_alter(&$form, &$form_state) {
  // Move elements out of group. We do not wish to group items.
  foreach ($form['loans'] as $loan_group) {
    $children = element_children($loan_group);
    foreach ($children as $child) {
      if ($child == 'title') {
        continue;
      }
      $form['all_loans'][$child] = $loan_group[$child];

      $item = &$form['all_loans'][$child];
      if (reol_base_fake_id($item['#id'])) {
        $ting_entity = ding_provider_get_pseudo_entity($item['#id']);
        $ting_entity->type = FALSE;
        $ting_entity->localId = REOL_BASE_LOCAL_ID_PREFIX . $ting_entity->tid;
        $item['#cover'] = field_view_field('ting_object', $ting_entity, 'ting_cover', 'user_list');
      }

      // Add another information regarding when the loan expires.
      $loan = $form['all_loans'][$child]['#loan'];
      $time = strtotime(check_plain($loan->expiry));
      $time_diff = $time - time();

      // Add class according to how long time there is left.
      $class = " ";
      if ($time_diff < variable_get('reol_loan_low_time_max', 86400)) {
        $class .= 'low';
      }
      elseif ($time_diff < variable_get('reol_loan_medium_time_max', 604800)) {
        $class .= 'medium';
      }
      else {
        $class .= 'high';
      }

      $form['all_loans'][$child]['#information']['expire_in'] = array(
        'label' => t('Expires in'),
        'data' => format_interval($time - time(), 2),
        'class' => 'expires-in' . $class,
        '#weight' => 10,
      );

      // Change format of the two other dates.
      $form['all_loans'][$child]['#information']['loan_date']['data'] = format_date(strtotime(check_plain($loan->loan_date)), 'reol_base_material_lists_date');
      $form['all_loans'][$child]['#information']['expiry']['data'] = format_date(strtotime(check_plain($loan->expiry)), 'reol_base_material_lists_date');

      // Hide message stating that the loan cannot be renewed.
      unset($form['all_loans'][$child]['#material_message']);
    }
  }

  // Remove old groups.
  unset($form['loans']);

  // Remove actions buttons.
  unset($form['actions_top']);
}

/**
 * Implements hook_ding_entity_buttons().
 *
 * Add loan button on entity view page for audiobook or ebook.
 */
function reol_loan_ding_entity_buttons($type, $entity) {
  $buttons = array();
  if (reol_loan_is_right_type($entity)) {
    drupal_add_library('system', 'drupal.ajax');
    $availability_list = ding_availability_items(array($entity->localId));
    if ($availability_list) {
      list($availability) = array_values($availability_list);

      switch (_reol_loan_map_availability($availability, $entity->id)) {
        case REOL_LOAN_STATUS_LOANABLE:
          $classes = array('btn', 'btn--loan', 'use-ajax');
          $buttons[] = reol_base_get_entity_button(t('Loan'), 'ting/object/' . $entity->id . '/loan', 'loan-' . $entity->id, $classes);
          break;

        case REOL_LOAN_STATUS_RESERVED:
          global $user;
          $classes = array('use-ajax');
          $buttons[] = reol_base_get_entity_button(t('Delete reservation'), 'user/' . $user->uid . '/status/reservations/delete/' . $entity->localId . '/ajax', 'delete-reservation-' . $entity->id, $classes);
          break;

        case REOL_LOAN_STATUS_NOT_LOANABLE:
          $buttons[] = [
            '#type' => 'markup',
            '#markup' => '<p class="notloanable">' . t('The title is not loanable') . '</p>',
          ];
          break;
      }
    }
  }

  // Make sure that our buttons are displayed before the ones from
  // reol_use_loan_ding_entity_buttons().
  foreach ($buttons as &$button) {
    $button['#weight'] = 1;
  }

  return $buttons;
}

/**
 * Implements hook_ding_entity_is().
 */
function reol_loan_ding_entity_is($entity, $is) {
  // If title is available, set reservable to false to hide Ding reserve button.
  if ($is == 'reservable' && reol_loan_is_right_type($entity)) {
    $availability_list = ding_availability_items(array($entity->localId));
    if ($availability_list) {
      list($availability) = array_values($availability_list);
      if (_reol_loan_map_availability($availability, $entity->id) == REOL_LOAN_STATUS_RESERVABLE) {
        return TRUE;
      }
    }
  }
}

/**
 * Implements hook_ding_entity_menu().
 *
 * Create menu callback for loaning an audiobook or ebook.
 */
function reol_loan_ding_entity_menu(&$items, $type, $path, $index) {
  if ($type == 'ding_entity') {
    $items[$path . '/loan'] = array(
      'title' => 'Loan',
      'page callback' => 'ding_provider_get_form',
      'page arguments' => array('reol_loan_loan_form', $index),
      'access callback' => TRUE,
    );
  }
}

/**
 * Check if an entity is of one of the types we handle.
 *
 * @param TingEntity $entity
 *   The entity to check.
 *
 * @return bool
 *   Whether or not type is correct.
 */
function reol_loan_is_right_type(TingEntity $entity) {
  // If the entity is removed from the data-well the type of it will be FALSE.
  // We have to support loaning titles that have been reserved before the entity
  // was removed. Because of this, when the type === FALSE, we should handle the
  // entity.
  return (bool) reol_base_get_type_name($entity->type) || $entity->type === FALSE;
}

/**
 * Map the availability to constant.
 *
 * @param array $availability
 *   Availability received from provider.
 * @param string $ding_entity_id
 *   The Id of the entity to map availability for.
 *
 * @return int
 *   The status ints from the top of this file.
 *
 * @throws \DingProviderDoesntImplement
 * @throws \DingProviderNoProvider
 */
function _reol_loan_map_availability(array $availability, $ding_entity_id) {
  // Titles might have the special notloanable-status. This happens when titles
  // are removed. This should trump everything.
  if (@$availability['notloanable']) {
    return REOL_LOAN_STATUS_NOT_LOANABLE;
  }

  // If users is logged in enrich the availability array with user related data
  // which was fetched at login time.
  global $user;
  if (user_is_logged_in() && ding_user_is_provider_user($user)) {
    $loans = ding_provider_invoke('loan', 'list', $user);
    if (array_key_exists($ding_entity_id, $loans)) {
      return REOL_LOAN_STATUS_LOANED;
    }
    else {
      $reservations = ding_provider_invoke('reservation', 'list', $user);
      if (!empty($reservations['not_ready_for_pickup'])) {
        foreach ($reservations['not_ready_for_pickup'] as $reservation) {
          if ($reservation->getEntity()->id == $ding_entity_id) {
            return REOL_LOAN_STATUS_RESERVED;
          }
        }
      }
      if (!empty($reservations['ready_for_pickup'])) {
        foreach ($reservations['ready_for_pickup'] as $reservation) {
          if ($reservation->getEntity()->id == $ding_entity_id) {
            return REOL_LOAN_STATUS_LOANABLE;
          }
        }
      }
    }
  }

  if ($availability['available']) {
    return REOL_LOAN_STATUS_LOANABLE;
  }
  elseif ($availability['reservable']) {
    return REOL_LOAN_STATUS_RESERVABLE;
  }

  return REOL_LOAN_STATUS_NOT_LOANABLE;
}

/**
 * Ajax version of the delete reservations form.
 *
 * @param object $user
 *   The user from request.
 * @param string $local_ids
 *   The local ids to delete reservations for, comma separated.
 *
 * @throws \Exception
 */
function reol_loan_delete_reservations_ajax($user, $local_ids) {
  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  // Get delete form.
  $form_raw = drupal_get_form('ding_reservation_delete_reservations_form', $user, $local_ids);

  $html = theme('status_messages');
  $html .= drupal_render($form_raw);

  if ($html) {
    $response['#commands'][] = ajax_command_ding_popup('ding_reservation', t('Delete reservations'), $html, array('refresh' => TRUE));
  }
  ajax_deliver($response);
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Add ereol specific admin configuration to user settings form.
 */
function reol_loan_form_user_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['ereol_user'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ereol user settings'),
    '#weight' => 0,
    '#tree' => FALSE,
  );
  $loan_text = variable_get('ereol_loan_text');
  $form['ereol_user']['ereol_loan_text'] = array(
    '#type' => 'text_format',
    '#title' => t('Loan text'),
    '#format' => 'ding_wysiwyg',
    '#default_value' => isset($loan_text['value']) ? $loan_text['value'] : '',
    '#description' => t('Text to display in the loan section of the user page.'),
  );
}

/**
 * Implements hook_panels_pane_content_alter().
 *
 * Change the content of the loan panel pane on user pages.
 */
function reol_loan_panels_pane_content_alter($content, $pane, $args, $contexts) {
  if ($pane->type == 'loans') {
    if ($pane->subtype == 'loans') {
      if (!empty($content->content)) {
        if (isset(variable_get('ereol_loan_text')['value'])) {
          // Add text to top of loan block.
          $content->content = array(
            'ereol_loan_text' => array(
              '#markup' => '<div>' . variable_get('ereol_loan_text')['value'] . '</div>',
            ),
          ) + $content->content;
        }
      }
    }
  }
}
