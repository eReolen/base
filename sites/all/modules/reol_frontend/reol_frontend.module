<?php

/**
 * @file
 * Code for the eReolen frontend feature.
 */

include_once 'reol_frontend.features.inc';

/**
 * Implements hook_entity_info_alter().
 */
function reol_frontend_entity_info_alter(&$entity_info) {
  $entity_info['ting_object']['view modes'] += array(
    'review' => array(
      'label' => t('Review'),
      'custom settings' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function reol_frontend_menu() {
  $items = array();

  $items['video/%node/view'] = array(
    'page callback' => 'reol_frontend_view_video',
    'page arguments' => array(1),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function reol_frontend_theme() {
  return array(
    'reol_frontend_reol_login' => array(
      'variables' => array(
        'content' => '',
        'count' => NULL,
      ),
      'path' => drupal_get_path('module', 'reol_frontend') . '/templates',
      'template' => 'reol-frontend-reol-login',
    ),
    'reol_overlay_icons' => array(
      'variables' => array(
        'icons' => array(),
        'classes' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reol_frontend_form_user_login_block_alter(&$form, &$form_state) {
  // Override Drupals default behavior of redirecting back to the page where the
  // login form block was displayed after login. We want to end up on /user in
  // all cases.
  $form['#action'] = url(current_path());
}

/**
 * Implements hook_form_FORM_ID_alter() for search_block_form().
 *
 * Add JS to implement auto-submitting on select in the ting_search_autocomplete
 * dropdown.
 */
function reol_frontend_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_block_form') {
    if (isset($form['search_block_form']['#autocomplete_path'])) {
      $form['search_block_form']['#attached']['js'][] = array('data' => drupal_get_path('module', 'reol_frontend') . '/js/reol_frontend.js');
    }
  }
}

/**
 * Returns HTML for overlay icons.
 */
function theme_reol_overlay_icons($variables) {
  $icon_with_attributes = '';

  $quota_explanation = '';
  $wrapper_attributes = [
    'class' => 'overlay-icons',
  ];

  foreach (array_filter($variables['icons']) as $icon) {
    $icon_attributes = [
      'class' => 'icon ' . $icon,
    ];

    // If material-type is set, then it is of the type that has the
    // material-icon and color-indication of quota.  $quota_explanation is for
    // aria-label, so only "visible" for screen-readers.
    if (isset($variables['material_type'])) {
      $quota_explanation = t('This material is a !type and is on your quota', array('!type' => $variables['material_type']));
    }
    // If no_quota is set, then the string changes to not-on-your-quota.
    if (isset($variables['no_quota']) && $variables['no_quota']) {
      $wrapper_attributes['class'] .= ' no-quota';
      $quota_explanation = t('This material is a !type and is not on your quota', array('!type' => $variables['material_type']));
      $icon_attributes['class'] .= ' no-quota';
    }
    if ($quota_explanation) {
      $icon_attributes['aria-label'] = $quota_explanation;
    }
    $icon_with_attributes .= '<span' . drupal_attributes($icon_attributes) . '></span>';
  }
  if (!$icon_with_attributes) {
    return '';
  }

  return '<div ' . drupal_attributes($wrapper_attributes) . '>' . $icon_with_attributes . '</div>';
}

/**
 * Implements hook_theme_registry_alter().
 */
function reol_frontend_theme_registry_alter(&$theme_registry) {
  // Remove ting_carousel_process_ting_object, as it messes too much with the
  // ting_entity view.
  if (isset($theme_registry['ting_object']['process functions'])) {
    $process_functions = array_values(array_diff($theme_registry['ting_object']['process functions'],
                           array('ting_carousel_process_ting_object')));
    $theme_registry['ting_object']['process functions'] = $process_functions;
  }
}

/**
 * Implements hook_panels_pane_content_alter().
 */
function reol_frontend_panels_pane_content_alter($content, $pane, $args, $contexts) {
  if ($pane->type == 'profile2_form' && $pane->subtype == 'profile2_form') {
    // Override title on profile form. DDBasic does it by passing the titles
    // through t() in the template, which is not the way to do it.
    $content->title = t('User profile');
  }
  if ($pane->type == 'reservations' && $pane->subtype == 'reservations') {
    // Same issue as above.
    if (!empty($pane->configuration['reservation_type_list']['ready_for_pickup'])) {
      $content->title = t('Redeemable reservations');
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function reol_frontend_preprocess_node(&$variables) {
  $node = $variables['node'];

  if ($node->type == 'faq') {
    $uri = entity_uri('node', $node);
    $variables['link'] = url($uri['path'], $uri['options']);
  }

  // Add variable that tells if the teaser is an image teaser.
  if ($node->type == 'article') {
    $variables['is_image_teaser'] = isset($node->field_image_teaser[LANGUAGE_NONE][0]['value']) &&
      $node->field_image_teaser[LANGUAGE_NONE][0]['value'] == 1
      && !empty($node->field_ding_news_list_image);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function reol_frontend_ctools_plugin_directory($owner, $plugin_type) {
  return 'plugins/' . $plugin_type;
}

/**
 * Implements hook_views_query_alter().
 *
 * When the field reol_entity_type is present in the where
 * statement of a views query we have to alter it. By default
 * the views query will only find exact matches, but this field
 * works differently. When nothing is selected, it means that
 * everything is selected. We alter query to find all elements
 * that match the value, or where the field is empty.
 */
function reol_frontend_views_query_alter(&$view, &$query) {
  // Find out if the field 'reol_entity_type is present in query.
  $found = FALSE;
  foreach ($query->where as $wk => $where) {
    foreach ($where['conditions'] as $ck => $condition) {
      if (is_string($condition['field']) && $condition['field'] == 'field_data_field_reol_entity_type.field_reol_entity_type_value') {
        $found = $condition;
        // If it is present, remove it. We add it ourself in a group below.
        unset($query->where[$wk]['conditions'][$ck]);
      }
    }
  }

  // If we have found it. We add a group finding elements that either
  // match the value, or that has no value in the field.
  if ($found) {
    $query->where[] = array(
      'args' => array(),
      'type' => 'OR',
      'conditions' => array(
        $found,
        array(
          'field' => 'field_data_field_reol_entity_type.field_reol_entity_type_value',
          'value' => '',
          'operator' => 'IS NULL',
        ),
      ),
    );
    // By default, Views does inner joins. This means that results
    // where the field is empty will not appear. Change to left instead.
    $query->table_queue['field_data_field_reol_entity_type']['join']->type = "LEFT";
  }
}

/**
 * Return quota/type icons for a DingEntity.
 *
 * @param DingEntity $ding_entity
 *   The entity to make icons for.
 *
 * @return string
 *   HTML for the icons, or an empty string.
 */
function reol_frontend_ding_entity_icons(DingEntity $ding_entity) {
  if (!isset($ding_entity->reol_no_icons)) {
    $icons = array();
    if (!isset($ding_entity->reol_no_type_icons)) {
      $icons[] = reol_base_get_type_icon($ding_entity->getType());
    }
    return theme('reol_overlay_icons', array(
      'icons' => $icons,
      'material_type' => $ding_entity->getType(),
      'no_quota' => !$ding_entity->reply->on_quota,
    ));
  }
  return '';
}

/**
 * View a video from modal.
 *
 * @param object $node
 *   The video node.
 *
 * @return array
 *   Ajax render array.
 */
function reol_frontend_view_video($node) {
  $commands = array();
  $commands[] = ajax_command_ding_popup('reol_frontend', t('View video'), drupal_render(node_view($node, 'full')), array('refresh' => TRUE, 'class' => array('video-modal')));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reol_frontend_form_profile2_edit_provider_publizon_form_alter(&$form, &$form_state) {
  // Add support id to form as read-only field.
  $form['support_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Support id'),
    '#description' => t('Your friendly id for using in support requests.'),
    '#default_value' => $_SESSION['ding_user']['user']['data']['support_id'],
    '#disabled' => TRUE,
    '#size' => 60,
    '#weight' => -50,
  );

  // Hide pass change fieldset.
  $form['pass']['#access'] = FALSE;

  // Hide sms fee.
  $form['ding_user_fee_sms']['#access'] = FALSE;

  // Add message about confirming values right under “Support id”.
  $message = variable_get('ereol_profile_confirm_message');
  if (!empty($message['value'])) {
    $form['ereol_profile_confirm_message'] = array(
      '#markup' => '<div class="profile-confirm-message">' . $message['value'] . '</div>',
      '#weight' => -49,
    );
  }

  // Unset default values to force user to confirm values when saving.
  unset($form['profile_provider_publizon']['field_phone_confirm'][LANGUAGE_NONE][0]['value']['#default_value']);
  unset($form['profile_provider_publizon']['field_email_confirm'][LANGUAGE_NONE][0]['email']['#default_value']);

  $form['#validate'][] = '_reol_frontend_profile2_validate';
}

/**
 * Validation function for profile2_edit_provider_publizon form.
 *
 * Validates that phone and email are confirmed if set.
 *
 * @param array $form
 *   The form.
 * @param array $form_state
 *   The form state.
 */
function _reol_frontend_profile2_validate(array $form, array &$form_state) {
  $phone_value = trim($form_state['values']['profile_provider_publizon']['field_phone'][LANGUAGE_NONE][0]['value'] ?? '');
  if (!empty($phone_value)) {
    $phone_value_confirm = trim($form_state['values']['profile_provider_publizon']['field_phone_confirm'][LANGUAGE_NONE][0]['value'] ?? '');
    if ($phone_value_confirm !== $phone_value) {
      form_set_error('profile_provider_publizon][field_phone_confirm', t('Please confirm your phone number'));
    }
  }

  $email_value = trim($form_state['values']['profile_provider_publizon']['field_email'][LANGUAGE_NONE][0]['email'] ?? '');
  if (!empty($email_value)) {
    $email_value_confirm = trim($form_state['values']['profile_provider_publizon']['field_email_confirm'][LANGUAGE_NONE][0]['email'] ?? '');
    if ($email_value_confirm !== $email_value) {
      form_set_error('profile_provider_publizon][field_email_confirm', t('Please confirm your email address'));
    }
  }
}

/**
 * Implements hook_ting_online_url_alter().
 *
 * Remove the online URL so ding_availability doesn't skip the availability
 * check, but not from relation objects.
 *
 * This will remove the "See online" entity button.
 */
function reol_frontend_ting_online_url_alter(&$url, $entity) {
  $type = reol_base_get_type($entity->getType());
  if ($type) {
    $url = "";
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see ting_search_backend_engines_content_type_render()
 */
function reol_frontend_form_ting_search_backend_engines_form_alter(&$form, &$form_state) {
  $backends = search_get_info();
  $default = search_get_default_module_info();

  $options = &$form['backends']['searches']['#options'];
  foreach ($backends as $backend) {

    // Create new title for better translations.
    switch ($backend['path']) {
      case 'ting':
        $title = t('Search Ting');
        break;

      case 'node':
        $title = t('Search content');
        break;
    }

    // Create old title for replacing.
    $old_title = t('Search @backend', array('@backend' => $backend['title']));

    // Replace title with new one.
    if (isset($options[$backend['module']])) {
      $options[$backend['module']] = str_replace($old_title, $title, $options[$backend['module']]);
    }
    elseif ($default['module'] == $backend['module']) {
      $options[0] = str_replace($old_title, $title, $options[0]);
    }
  }
}

/**
 * Implements hook_drupal_goto_alter().
 *
 * Remove the fragment from the redirect to <front> by ding_user. We don't have
 * the #login form and JS of DDBasic, so it's a no-op and looks weird.
 */
function reol_frontend_drupal_goto_alter(&$path, &$options) {
  if ($path == '' &&
    isset($options['fragment']) &&
    $options['fragment'] == 'login') {
    unset($options['fragment']);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Removes audienceCategory ("alder") facet options containing "«number» aar"
 * which are duplicates of the ones containing "«number» år".
 *
 * See https://jira.itkdev.dk/browse/ER-1349 for details.
 */
function reol_frontend_form_ding_facetbrowser_form_alter(&$form, &$form_state) {
  if (isset($form['facet.audienceCategory']['facet.audienceCategory']['#options'])) {
    // Remove all options containing a number followed by whitespace and the
    // word "aar" (ignoring case).
    $form['facet.audienceCategory']['facet.audienceCategory']['#options'] = array_filter(
      $form['facet.audienceCategory']['facet.audienceCategory']['#options'],
      static function ($option) {
        return !preg_match('/\d+\s+aar\b/i', $option);
      }
    );
  }
}
